// This file is generated by gen_commands.py, do not edit

#include "../../stdafx.h"
#include "cm_gen_commands.hpp"
#include "../../src/misc_cmd.h"
#include "../../src/object_cmd.h"
#include "../../src/order_cmd.h"
#include "../../src/rail_cmd.h"
#include "../../src/road_cmd.h"
#include "../../src/station_cmd.h"
#include "../../src/town_cmd.h"
#include "../../src/tunnelbridge_cmd.h"
namespace citymania {
namespace cmd {

/*
 * The code is mostly copied from network_command.cpp
 * but the table is not the same.
 */
static constexpr auto _callback_tuple = std::make_tuple(
    (CommandCallback *)nullptr, // Make sure this is actually a pointer-to-function.
    &CcBuildDocks,
    &CcPlaySound_CONSTRUCTION_WATER,
    &CcBuildPrimaryVehicle,
    &CcStartStopVehicle,
    &CcCreateGroup,
    &CcAddVehicleNewGroup,
    &CcBuildAirport,
    &CcCloneVehicle,
    &CcRoadDepot,
    &CcRoadStop,
    &CcPlaySound_CONSTRUCTION_OTHER,
    &CcBuildRoadTunnel,
    &CcRailDepot,
    &CcPlaySound_CONSTRUCTION_RAIL,
    &CcStation,
    &CcBuildRailTunnel,
    &CcBuildIndustry,
    &CcFoundRandomTown,
    &CcFoundTown,
    &CcBuildWagon,
    &CcPlaceSign,
    &CcBuildBridge,
    &CcTerraform,
    &CcPlaySound_EXPLOSION
);

inline constexpr size_t _callback_tuple_size = std::tuple_size_v<decltype(_callback_tuple)>;

#ifdef SILENCE_GCC_FUNCTION_POINTER_CAST
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wcast-function-type"
#endif

template <size_t... i>
inline auto MakeCallbackTable(std::index_sequence<i...>) noexcept {
    return std::array<CommandCallback *, sizeof...(i)>{{ reinterpret_cast<CommandCallback *>(reinterpret_cast<void(*)()>(std::get<i>(_callback_tuple)))... }}; // MingW64 fails linking when casting a pointer to its own type. To work around, cast it to some other type first.
}
/** Type-erased table of callbacks. */
static auto _callback_table = MakeCallbackTable(std::make_index_sequence<_callback_tuple_size>{});

template <typename T> struct CallbackArgsHelper;
template <typename... Targs>
struct CallbackArgsHelper<void(*const)(Commands, const CommandCost &, Targs...)> {
    using Args = std::tuple<std::decay_t<Targs>...>;
};
#ifdef SILENCE_GCC_FUNCTION_POINTER_CAST
#   pragma GCC diagnostic pop
#endif

static size_t FindCallbackIndex(CommandCallback *callback) {
    if (auto it = std::find(std::cbegin(_callback_table), std::cend(_callback_table), callback); it != std::cend(_callback_table)) {
        return static_cast<size_t>(std::distance(std::cbegin(_callback_table), it));
    }
    return std::numeric_limits<size_t>::max();
}

template <Commands Tcmd, size_t Tcb, typename... Targs>
bool _DoPost(StringID err_msg, TileIndex tile, Targs... args) {
    return ::Command<Tcmd>::Post(err_msg, std::get<Tcb>(_callback_tuple), tile, std::forward<Targs>(args)...);
}
template <Commands Tcmd, size_t Tcb, typename... Targs>
constexpr auto MakeCallback() noexcept {
    /* Check if the callback matches with the command arguments. If not, don''t generate an Unpack proc. */
    using Tcallback = std::tuple_element_t<Tcb, decltype(_callback_tuple)>;
    if constexpr (std::is_same_v<Tcallback, CommandCallback * const> ||
            std::is_same_v<Tcallback, CommandCallbackData * const> ||
            std::is_same_v<typename CommandTraits<Tcmd>::CbArgs, typename CallbackArgsHelper<Tcallback>::Args> ||
            (!std::is_void_v<typename CommandTraits<Tcmd>::RetTypes> && std::is_same_v<typename CallbackArgsHelper<typename CommandTraits<Tcmd>::RetCallbackProc const>::Args, typename CallbackArgsHelper<Tcallback>::Args>)) {
        return &_DoPost<Tcmd, Tcb, Targs...>;
    } else {
        return nullptr;
    }
}

template <Commands Tcmd, typename... Targs, typename T, T... i>
inline constexpr auto MakeDispatchTableHelper(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Targs...), sizeof...(i)>{MakeCallback<Tcmd, i, Targs...>()... };
}

template <Commands Tcmd, typename... Targs>
inline constexpr auto MakeDispatchTable() noexcept
{
    return MakeDispatchTableHelper<Tcmd, Targs...>(std::make_index_sequence<_callback_tuple_size>{});
}

static constexpr auto _CreateGoal_dispatch = MakeDispatchTable<CMD_CREATE_GOAL, CompanyID , GoalType , GoalTypeID , const std::string &>();
bool CreateGoal::do_post(CommandCallback *callback) {
    return _CreateGoal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->company, this->type, this->dest, this->text);
}
bool CreateGoal::do_test() {
    return std::get<0>(::Command<CMD_CREATE_GOAL>::Do(DC_NONE, company, type, dest, text)).Succeeded();
}

static constexpr auto _RemoveGoal_dispatch = MakeDispatchTable<CMD_REMOVE_GOAL, GoalID >();
bool RemoveGoal::do_post(CommandCallback *callback) {
    return _RemoveGoal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal);
}
bool RemoveGoal::do_test() {
    return (::Command<CMD_REMOVE_GOAL>::Do(DC_NONE, goal)).Succeeded();
}

static constexpr auto _SetGoalText_dispatch = MakeDispatchTable<CMD_SET_GOAL_TEXT, GoalID , const std::string &>();
bool SetGoalText::do_post(CommandCallback *callback) {
    return _SetGoalText_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal, this->text);
}
bool SetGoalText::do_test() {
    return (::Command<CMD_SET_GOAL_TEXT>::Do(DC_NONE, goal, text)).Succeeded();
}

static constexpr auto _SetGoalProgress_dispatch = MakeDispatchTable<CMD_SET_GOAL_PROGRESS, GoalID , const std::string &>();
bool SetGoalProgress::do_post(CommandCallback *callback) {
    return _SetGoalProgress_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal, this->text);
}
bool SetGoalProgress::do_test() {
    return (::Command<CMD_SET_GOAL_PROGRESS>::Do(DC_NONE, goal, text)).Succeeded();
}

static constexpr auto _SetGoalCompleted_dispatch = MakeDispatchTable<CMD_SET_GOAL_COMPLETED, GoalID , bool >();
bool SetGoalCompleted::do_post(CommandCallback *callback) {
    return _SetGoalCompleted_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal, this->completed);
}
bool SetGoalCompleted::do_test() {
    return (::Command<CMD_SET_GOAL_COMPLETED>::Do(DC_NONE, goal, completed)).Succeeded();
}

static constexpr auto _GoalQuestion_dispatch = MakeDispatchTable<CMD_GOAL_QUESTION, uint16 , uint16 , bool , uint32 , GoalQuestionType , const std::string &>();
bool GoalQuestion::do_post(CommandCallback *callback) {
    return _GoalQuestion_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->uniqueid, this->target, this->is_client, this->button_mask, this->type, this->text);
}
bool GoalQuestion::do_test() {
    return (::Command<CMD_GOAL_QUESTION>::Do(DC_NONE, uniqueid, target, is_client, button_mask, type, text)).Succeeded();
}

static constexpr auto _GoalQuestionAnswer_dispatch = MakeDispatchTable<CMD_GOAL_QUESTION_ANSWER, uint16 , uint8 >();
bool GoalQuestionAnswer::do_post(CommandCallback *callback) {
    return _GoalQuestionAnswer_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->uniqueid, this->button);
}
bool GoalQuestionAnswer::do_test() {
    return (::Command<CMD_GOAL_QUESTION_ANSWER>::Do(DC_NONE, uniqueid, button)).Succeeded();
}

static constexpr auto _CustomNewsItem_dispatch = MakeDispatchTable<CMD_CUSTOM_NEWS_ITEM, NewsType , NewsReferenceType , CompanyID , uint32 , const std::string &>();
bool CustomNewsItem::do_post(CommandCallback *callback) {
    return _CustomNewsItem_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->type, this->reftype1, this->company, this->reference, this->text);
}
bool CustomNewsItem::do_test() {
    return (::Command<CMD_CUSTOM_NEWS_ITEM>::Do(DC_NONE, type, reftype1, company, reference, text)).Succeeded();
}

static constexpr auto _CreateStoryPage_dispatch = MakeDispatchTable<CMD_CREATE_STORY_PAGE, CompanyID , const std::string &>();
bool CreateStoryPage::do_post(CommandCallback *callback) {
    return _CreateStoryPage_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->company, this->text);
}
bool CreateStoryPage::do_test() {
    return std::get<0>(::Command<CMD_CREATE_STORY_PAGE>::Do(DC_NONE, company, text)).Succeeded();
}

static constexpr auto _CreateStoryPageElement_dispatch = MakeDispatchTable<CMD_CREATE_STORY_PAGE_ELEMENT, StoryPageID , StoryPageElementType , uint32 , const std::string &>();
bool CreateStoryPageElement::do_post(CommandCallback *callback) {
    return _CreateStoryPageElement_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id, this->type, this->reference, this->text);
}
bool CreateStoryPageElement::do_test() {
    return std::get<0>(::Command<CMD_CREATE_STORY_PAGE_ELEMENT>::Do(DC_NONE, this->tile, page_id, type, reference, text)).Succeeded();
}

static constexpr auto _UpdateStoryPageElement_dispatch = MakeDispatchTable<CMD_UPDATE_STORY_PAGE_ELEMENT, StoryPageElementID , uint32 , const std::string &>();
bool UpdateStoryPageElement::do_post(CommandCallback *callback) {
    return _UpdateStoryPageElement_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_element_id, this->reference, this->text);
}
bool UpdateStoryPageElement::do_test() {
    return (::Command<CMD_UPDATE_STORY_PAGE_ELEMENT>::Do(DC_NONE, this->tile, page_element_id, reference, text)).Succeeded();
}

static constexpr auto _SetStoryPageTitle_dispatch = MakeDispatchTable<CMD_SET_STORY_PAGE_TITLE, StoryPageID , const std::string &>();
bool SetStoryPageTitle::do_post(CommandCallback *callback) {
    return _SetStoryPageTitle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id, this->text);
}
bool SetStoryPageTitle::do_test() {
    return (::Command<CMD_SET_STORY_PAGE_TITLE>::Do(DC_NONE, page_id, text)).Succeeded();
}

static constexpr auto _SetStoryPageDate_dispatch = MakeDispatchTable<CMD_SET_STORY_PAGE_DATE, StoryPageID , Date >();
bool SetStoryPageDate::do_post(CommandCallback *callback) {
    return _SetStoryPageDate_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id, this->date);
}
bool SetStoryPageDate::do_test() {
    return (::Command<CMD_SET_STORY_PAGE_DATE>::Do(DC_NONE, page_id, date)).Succeeded();
}

static constexpr auto _ShowStoryPage_dispatch = MakeDispatchTable<CMD_SHOW_STORY_PAGE, StoryPageID >();
bool ShowStoryPage::do_post(CommandCallback *callback) {
    return _ShowStoryPage_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id);
}
bool ShowStoryPage::do_test() {
    return (::Command<CMD_SHOW_STORY_PAGE>::Do(DC_NONE, page_id)).Succeeded();
}

static constexpr auto _RemoveStoryPage_dispatch = MakeDispatchTable<CMD_REMOVE_STORY_PAGE, StoryPageID >();
bool RemoveStoryPage::do_post(CommandCallback *callback) {
    return _RemoveStoryPage_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id);
}
bool RemoveStoryPage::do_test() {
    return (::Command<CMD_REMOVE_STORY_PAGE>::Do(DC_NONE, page_id)).Succeeded();
}

static constexpr auto _RemoveStoryPageElement_dispatch = MakeDispatchTable<CMD_REMOVE_STORY_PAGE_ELEMENT, StoryPageElementID >();
bool RemoveStoryPageElement::do_post(CommandCallback *callback) {
    return _RemoveStoryPageElement_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_element_id);
}
bool RemoveStoryPageElement::do_test() {
    return (::Command<CMD_REMOVE_STORY_PAGE_ELEMENT>::Do(DC_NONE, page_element_id)).Succeeded();
}

static constexpr auto _StoryPageButton_dispatch = MakeDispatchTable<CMD_STORY_PAGE_BUTTON, StoryPageElementID , VehicleID >();
bool StoryPageButton::do_post(CommandCallback *callback) {
    return _StoryPageButton_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_element_id, this->reference);
}
bool StoryPageButton::do_test() {
    return (::Command<CMD_STORY_PAGE_BUTTON>::Do(DC_NONE, this->tile, page_element_id, reference)).Succeeded();
}

static constexpr auto _BuildVehicle_dispatch = MakeDispatchTable<CMD_BUILD_VEHICLE, EngineID , bool , CargoID , ClientID >();
bool BuildVehicle::do_post(CommandCallback *callback) {
    return _BuildVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->eid, this->use_free_vehicles, this->cargo, this->client_id);
}
bool BuildVehicle::do_test() {
    return std::get<0>(::Command<CMD_BUILD_VEHICLE>::Do(DC_NONE, this->tile, eid, use_free_vehicles, cargo, client_id)).Succeeded();
}

static constexpr auto _SellVehicle_dispatch = MakeDispatchTable<CMD_SELL_VEHICLE, VehicleID , bool , bool , ClientID >();
bool SellVehicle::do_post(CommandCallback *callback) {
    return _SellVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->v_id, this->sell_chain, this->backup_order, this->client_id);
}
bool SellVehicle::do_test() {
    return (::Command<CMD_SELL_VEHICLE>::Do(DC_NONE, v_id, sell_chain, backup_order, client_id)).Succeeded();
}

static constexpr auto _RefitVehicle_dispatch = MakeDispatchTable<CMD_REFIT_VEHICLE, VehicleID , CargoID , byte , bool , bool , uint8 >();
bool RefitVehicle::do_post(CommandCallback *callback) {
    return _RefitVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->new_cid, this->new_subtype, this->auto_refit, this->only_this, this->num_vehicles);
}
bool RefitVehicle::do_test() {
    return std::get<0>(::Command<CMD_REFIT_VEHICLE>::Do(DC_NONE, veh_id, new_cid, new_subtype, auto_refit, only_this, num_vehicles)).Succeeded();
}

static constexpr auto _SendVehicleToDepot_dispatch = MakeDispatchTable<CMD_SEND_VEHICLE_TO_DEPOT, VehicleID , DepotCommand , const VehicleListIdentifier &>();
bool SendVehicleToDepot::do_post(CommandCallback *callback) {
    return _SendVehicleToDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->depot_cmd, this->vli);
}
bool SendVehicleToDepot::do_test() {
    return (::Command<CMD_SEND_VEHICLE_TO_DEPOT>::Do(DC_NONE, veh_id, depot_cmd, vli)).Succeeded();
}

static constexpr auto _ChangeServiceInt_dispatch = MakeDispatchTable<CMD_CHANGE_SERVICE_INT, VehicleID , uint16 , bool , bool >();
bool ChangeServiceInt::do_post(CommandCallback *callback) {
    return _ChangeServiceInt_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->serv_int, this->is_custom, this->is_percent);
}
bool ChangeServiceInt::do_test() {
    return (::Command<CMD_CHANGE_SERVICE_INT>::Do(DC_NONE, veh_id, serv_int, is_custom, is_percent)).Succeeded();
}

static constexpr auto _RenameVehicle_dispatch = MakeDispatchTable<CMD_RENAME_VEHICLE, VehicleID , const std::string &>();
bool RenameVehicle::do_post(CommandCallback *callback) {
    return _RenameVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->text);
}
bool RenameVehicle::do_test() {
    return (::Command<CMD_RENAME_VEHICLE>::Do(DC_NONE, veh_id, text)).Succeeded();
}

static constexpr auto _CloneVehicle_dispatch = MakeDispatchTable<CMD_CLONE_VEHICLE, VehicleID , bool >();
bool CloneVehicle::do_post(CommandCallback *callback) {
    return _CloneVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->share_orders);
}
bool CloneVehicle::do_test() {
    return std::get<0>(::Command<CMD_CLONE_VEHICLE>::Do(DC_NONE, this->tile, veh_id, share_orders)).Succeeded();
}

static constexpr auto _StartStopVehicle_dispatch = MakeDispatchTable<CMD_START_STOP_VEHICLE, VehicleID , bool >();
bool StartStopVehicle::do_post(CommandCallback *callback) {
    return _StartStopVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->evaluate_startstop_cb);
}
bool StartStopVehicle::do_test() {
    return (::Command<CMD_START_STOP_VEHICLE>::Do(DC_NONE, veh_id, evaluate_startstop_cb)).Succeeded();
}

static constexpr auto _MassStartStopVehicle_dispatch = MakeDispatchTable<CMD_MASS_START_STOP, bool , bool , const VehicleListIdentifier &>();
bool MassStartStopVehicle::do_post(CommandCallback *callback) {
    return _MassStartStopVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->do_start, this->vehicle_list_window, this->vli);
}
bool MassStartStopVehicle::do_test() {
    return (::Command<CMD_MASS_START_STOP>::Do(DC_NONE, this->tile, do_start, vehicle_list_window, vli)).Succeeded();
}

static constexpr auto _DepotSellAllVehicles_dispatch = MakeDispatchTable<CMD_DEPOT_SELL_ALL_VEHICLES, VehicleType >();
bool DepotSellAllVehicles::do_post(CommandCallback *callback) {
    return _DepotSellAllVehicles_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->vehicle_type);
}
bool DepotSellAllVehicles::do_test() {
    return (::Command<CMD_DEPOT_SELL_ALL_VEHICLES>::Do(DC_NONE, this->tile, vehicle_type)).Succeeded();
}

static constexpr auto _DepotMassAutoReplace_dispatch = MakeDispatchTable<CMD_DEPOT_MASS_AUTOREPLACE, VehicleType >();
bool DepotMassAutoReplace::do_post(CommandCallback *callback) {
    return _DepotMassAutoReplace_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->vehicle_type);
}
bool DepotMassAutoReplace::do_test() {
    return (::Command<CMD_DEPOT_MASS_AUTOREPLACE>::Do(DC_NONE, this->tile, vehicle_type)).Succeeded();
}

static constexpr auto _ChangeSetting_dispatch = MakeDispatchTable<CMD_CHANGE_SETTING, const std::string &, int32 >();
bool ChangeSetting::do_post(CommandCallback *callback) {
    return _ChangeSetting_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->name, this->value);
}
bool ChangeSetting::do_test() {
    return (::Command<CMD_CHANGE_SETTING>::Do(DC_NONE, name, value)).Succeeded();
}

static constexpr auto _ChangeCompanySetting_dispatch = MakeDispatchTable<CMD_CHANGE_COMPANY_SETTING, const std::string &, int32 >();
bool ChangeCompanySetting::do_post(CommandCallback *callback) {
    return _ChangeCompanySetting_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->name, this->value);
}
bool ChangeCompanySetting::do_test() {
    return (::Command<CMD_CHANGE_COMPANY_SETTING>::Do(DC_NONE, name, value)).Succeeded();
}

static constexpr auto _CreateGroup_dispatch = MakeDispatchTable<CMD_CREATE_GROUP, VehicleType , GroupID >();
bool CreateGroup::do_post(CommandCallback *callback) {
    return _CreateGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->vt, this->parent_group);
}
bool CreateGroup::do_test() {
    return std::get<0>(::Command<CMD_CREATE_GROUP>::Do(DC_NONE, vt, parent_group)).Succeeded();
}

static constexpr auto _AlterGroup_dispatch = MakeDispatchTable<CMD_ALTER_GROUP, AlterGroupMode , GroupID , GroupID , const std::string &>();
bool AlterGroup::do_post(CommandCallback *callback) {
    return _AlterGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->mode, this->group_id, this->parent_id, this->text);
}
bool AlterGroup::do_test() {
    return (::Command<CMD_ALTER_GROUP>::Do(DC_NONE, mode, group_id, parent_id, text)).Succeeded();
}

static constexpr auto _DeleteGroup_dispatch = MakeDispatchTable<CMD_DELETE_GROUP, GroupID >();
bool DeleteGroup::do_post(CommandCallback *callback) {
    return _DeleteGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id);
}
bool DeleteGroup::do_test() {
    return (::Command<CMD_DELETE_GROUP>::Do(DC_NONE, group_id)).Succeeded();
}

static constexpr auto _AddVehicleGroup_dispatch = MakeDispatchTable<CMD_ADD_VEHICLE_GROUP, GroupID , VehicleID , bool >();
bool AddVehicleGroup::do_post(CommandCallback *callback) {
    return _AddVehicleGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id, this->veh_id, this->add_shared);
}
bool AddVehicleGroup::do_test() {
    return std::get<0>(::Command<CMD_ADD_VEHICLE_GROUP>::Do(DC_NONE, group_id, veh_id, add_shared)).Succeeded();
}

static constexpr auto _AddSharedVehicleGroup_dispatch = MakeDispatchTable<CMD_ADD_SHARED_VEHICLE_GROUP, GroupID , VehicleType >();
bool AddSharedVehicleGroup::do_post(CommandCallback *callback) {
    return _AddSharedVehicleGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->id_g, this->type);
}
bool AddSharedVehicleGroup::do_test() {
    return (::Command<CMD_ADD_SHARED_VEHICLE_GROUP>::Do(DC_NONE, id_g, type)).Succeeded();
}

static constexpr auto _RemoveAllVehiclesGroup_dispatch = MakeDispatchTable<CMD_REMOVE_ALL_VEHICLES_GROUP, GroupID >();
bool RemoveAllVehiclesGroup::do_post(CommandCallback *callback) {
    return _RemoveAllVehiclesGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id);
}
bool RemoveAllVehiclesGroup::do_test() {
    return (::Command<CMD_REMOVE_ALL_VEHICLES_GROUP>::Do(DC_NONE, group_id)).Succeeded();
}

static constexpr auto _SetGroupFlag_dispatch = MakeDispatchTable<CMD_SET_GROUP_FLAG, GroupID , GroupFlags , bool , bool >();
bool SetGroupFlag::do_post(CommandCallback *callback) {
    return _SetGroupFlag_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id, this->flag, this->value, this->recursive);
}
bool SetGroupFlag::do_test() {
    return (::Command<CMD_SET_GROUP_FLAG>::Do(DC_NONE, group_id, flag, value, recursive)).Succeeded();
}

static constexpr auto _SetGroupLivery_dispatch = MakeDispatchTable<CMD_SET_GROUP_LIVERY, GroupID , bool , Colours >();
bool SetGroupLivery::do_post(CommandCallback *callback) {
    return _SetGroupLivery_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id, this->primary, this->colour);
}
bool SetGroupLivery::do_test() {
    return (::Command<CMD_SET_GROUP_LIVERY>::Do(DC_NONE, group_id, primary, colour)).Succeeded();
}

static constexpr auto _TurnRoadVeh_dispatch = MakeDispatchTable<CMD_TURN_ROADVEH, VehicleID >();
bool TurnRoadVeh::do_post(CommandCallback *callback) {
    return _TurnRoadVeh_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id);
}
bool TurnRoadVeh::do_test() {
    return (::Command<CMD_TURN_ROADVEH>::Do(DC_NONE, veh_id)).Succeeded();
}

static constexpr auto _ChangeTimetable_dispatch = MakeDispatchTable<CMD_CHANGE_TIMETABLE, VehicleID , VehicleOrderID , ModifyTimetableFlags , uint16 >();
bool ChangeTimetable::do_post(CommandCallback *callback) {
    return _ChangeTimetable_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->order_number, this->mtf, this->data);
}
bool ChangeTimetable::do_test() {
    return (::Command<CMD_CHANGE_TIMETABLE>::Do(DC_NONE, veh, order_number, mtf, data)).Succeeded();
}

static constexpr auto _SetVehicleOnTime_dispatch = MakeDispatchTable<CMD_SET_VEHICLE_ON_TIME, VehicleID >();
bool SetVehicleOnTime::do_post(CommandCallback *callback) {
    return _SetVehicleOnTime_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh);
}
bool SetVehicleOnTime::do_test() {
    return (::Command<CMD_SET_VEHICLE_ON_TIME>::Do(DC_NONE, veh)).Succeeded();
}

static constexpr auto _AutofillTimetable_dispatch = MakeDispatchTable<CMD_AUTOFILL_TIMETABLE, VehicleID , bool , bool >();
bool AutofillTimetable::do_post(CommandCallback *callback) {
    return _AutofillTimetable_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->autofill, this->preserve_wait_time);
}
bool AutofillTimetable::do_test() {
    return (::Command<CMD_AUTOFILL_TIMETABLE>::Do(DC_NONE, veh, autofill, preserve_wait_time)).Succeeded();
}

static constexpr auto _SetTimetableStart_dispatch = MakeDispatchTable<CMD_SET_TIMETABLE_START, VehicleID , bool , Date >();
bool SetTimetableStart::do_post(CommandCallback *callback) {
    return _SetTimetableStart_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->timetable_all, this->start_date);
}
bool SetTimetableStart::do_test() {
    return (::Command<CMD_SET_TIMETABLE_START>::Do(DC_NONE, veh_id, timetable_all, start_date)).Succeeded();
}

static constexpr auto _WantEnginePreview_dispatch = MakeDispatchTable<CMD_WANT_ENGINE_PREVIEW, EngineID >();
bool WantEnginePreview::do_post(CommandCallback *callback) {
    return _WantEnginePreview_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id);
}
bool WantEnginePreview::do_test() {
    return (::Command<CMD_WANT_ENGINE_PREVIEW>::Do(DC_NONE, engine_id)).Succeeded();
}

static constexpr auto _EngineCtrl_dispatch = MakeDispatchTable<CMD_ENGINE_CTRL, EngineID , CompanyID , bool >();
bool EngineCtrl::do_post(CommandCallback *callback) {
    return _EngineCtrl_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id, this->company_id, this->allow);
}
bool EngineCtrl::do_test() {
    return (::Command<CMD_ENGINE_CTRL>::Do(DC_NONE, engine_id, company_id, allow)).Succeeded();
}

static constexpr auto _RenameEngine_dispatch = MakeDispatchTable<CMD_RENAME_ENGINE, EngineID , const std::string &>();
bool RenameEngine::do_post(CommandCallback *callback) {
    return _RenameEngine_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id, this->text);
}
bool RenameEngine::do_test() {
    return (::Command<CMD_RENAME_ENGINE>::Do(DC_NONE, engine_id, text)).Succeeded();
}

static constexpr auto _SetVehicleVisibility_dispatch = MakeDispatchTable<CMD_SET_VEHICLE_VISIBILITY, EngineID , bool >();
bool SetVehicleVisibility::do_post(CommandCallback *callback) {
    return _SetVehicleVisibility_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id, this->hide);
}
bool SetVehicleVisibility::do_test() {
    return (::Command<CMD_SET_VEHICLE_VISIBILITY>::Do(DC_NONE, engine_id, hide)).Succeeded();
}

static constexpr auto _PlantTree_dispatch = MakeDispatchTable<CMD_PLANT_TREE, TileIndex , byte >();
bool PlantTree::do_post(CommandCallback *callback) {
    return _PlantTree_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->tree_to_plant);
}
bool PlantTree::do_test() {
    return (::Command<CMD_PLANT_TREE>::Do(DC_NONE, this->tile, start_tile, tree_to_plant)).Succeeded();
}

static constexpr auto _LandscapeClear_dispatch = MakeDispatchTable<CMD_LANDSCAPE_CLEAR>();
bool LandscapeClear::do_post(CommandCallback *callback) {
    return _LandscapeClear_dispatch[FindCallbackIndex(callback)](this->error, this->tile);
}
bool LandscapeClear::do_test() {
    return (::Command<CMD_LANDSCAPE_CLEAR>::Do(DC_NONE, this->tile)).Succeeded();
}

static constexpr auto _ClearArea_dispatch = MakeDispatchTable<CMD_CLEAR_AREA, TileIndex , bool >();
bool ClearArea::do_post(CommandCallback *callback) {
    return _ClearArea_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->diagonal);
}
bool ClearArea::do_test() {
    return std::get<0>(::Command<CMD_CLEAR_AREA>::Do(DC_NONE, this->tile, start_tile, diagonal)).Succeeded();
}

static constexpr auto _BuildAirport_dispatch = MakeDispatchTable<CMD_BUILD_AIRPORT, byte , byte , StationID , bool >();
bool BuildAirport::do_post(CommandCallback *callback) {
    return _BuildAirport_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->airport_type, this->layout, this->station_to_join, this->adjacent);
}
bool BuildAirport::do_test() {
    return (::Command<CMD_BUILD_AIRPORT>::Do(DC_NONE, this->tile, airport_type, layout, station_to_join, adjacent)).Succeeded();
}

static constexpr auto _BuildDock_dispatch = MakeDispatchTable<CMD_BUILD_DOCK, StationID , bool >();
bool BuildDock::do_post(CommandCallback *callback) {
    return _BuildDock_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->station_to_join, this->adjacent);
}
bool BuildDock::do_test() {
    return (::Command<CMD_BUILD_DOCK>::Do(DC_NONE, this->tile, station_to_join, adjacent)).Succeeded();
}

static constexpr auto _BuildRailStation_dispatch = MakeDispatchTable<CMD_BUILD_RAIL_STATION, RailType , Axis , byte , byte , StationClassID , byte , StationID , bool >();
bool BuildRailStation::do_post(CommandCallback *callback) {
    return _BuildRailStation_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->rt, this->axis, this->numtracks, this->plat_len, this->spec_class, this->spec_index, this->station_to_join, this->adjacent);
}
bool BuildRailStation::do_test() {
    return (::Command<CMD_BUILD_RAIL_STATION>::Do(DC_NONE, this->tile, rt, axis, numtracks, plat_len, spec_class, spec_index, station_to_join, adjacent)).Succeeded();
}

static constexpr auto _RemoveFromRailStation_dispatch = MakeDispatchTable<CMD_REMOVE_FROM_RAIL_STATION, TileIndex , bool >();
bool RemoveFromRailStation::do_post(CommandCallback *callback) {
    return _RemoveFromRailStation_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end, this->keep_rail);
}
bool RemoveFromRailStation::do_test() {
    return (::Command<CMD_REMOVE_FROM_RAIL_STATION>::Do(DC_NONE, this->tile, end, keep_rail)).Succeeded();
}

static constexpr auto _BuildRoadStop_dispatch = MakeDispatchTable<CMD_BUILD_ROAD_STOP, uint8 , uint8 , RoadStopType , bool , DiagDirection , RoadType , StationID , bool >();
bool BuildRoadStop::do_post(CommandCallback *callback) {
    return _BuildRoadStop_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->width, this->length, this->stop_type, this->is_drive_through, this->ddir, this->rt, this->station_to_join, this->adjacent);
}
bool BuildRoadStop::do_test() {
    return (::Command<CMD_BUILD_ROAD_STOP>::Do(DC_NONE, this->tile, width, length, stop_type, is_drive_through, ddir, rt, station_to_join, adjacent)).Succeeded();
}

static constexpr auto _RemoveRoadStop_dispatch = MakeDispatchTable<CMD_REMOVE_ROAD_STOP, uint8 , uint8 , RoadStopType , bool >();
bool RemoveRoadStop::do_post(CommandCallback *callback) {
    return _RemoveRoadStop_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->width, this->height, this->stop_type, this->remove_road);
}
bool RemoveRoadStop::do_test() {
    return (::Command<CMD_REMOVE_ROAD_STOP>::Do(DC_NONE, this->tile, width, height, stop_type, remove_road)).Succeeded();
}

static constexpr auto _RenameStation_dispatch = MakeDispatchTable<CMD_RENAME_STATION, StationID , const std::string &>();
bool RenameStation::do_post(CommandCallback *callback) {
    return _RenameStation_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->station_id, this->text);
}
bool RenameStation::do_test() {
    return (::Command<CMD_RENAME_STATION>::Do(DC_NONE, station_id, text)).Succeeded();
}

static constexpr auto _OpenCloseAirport_dispatch = MakeDispatchTable<CMD_OPEN_CLOSE_AIRPORT, StationID >();
bool OpenCloseAirport::do_post(CommandCallback *callback) {
    return _OpenCloseAirport_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->station_id);
}
bool OpenCloseAirport::do_test() {
    return (::Command<CMD_OPEN_CLOSE_AIRPORT>::Do(DC_NONE, station_id)).Succeeded();
}

static constexpr auto _CompanyCtrl_dispatch = MakeDispatchTable<CMD_COMPANY_CTRL, CompanyCtrlAction , CompanyID , CompanyRemoveReason , ClientID >();
bool CompanyCtrl::do_post(CommandCallback *callback) {
    return _CompanyCtrl_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cca, this->company_id, this->reason, this->client_id);
}
bool CompanyCtrl::do_test() {
    return (::Command<CMD_COMPANY_CTRL>::Do(DC_NONE, cca, company_id, reason, client_id)).Succeeded();
}

static constexpr auto _GiveMoney_dispatch = MakeDispatchTable<CMD_GIVE_MONEY, uint32 , CompanyID >();
bool GiveMoney::do_post(CommandCallback *callback) {
    return _GiveMoney_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->money, this->dest_company);
}
bool GiveMoney::do_test() {
    return (::Command<CMD_GIVE_MONEY>::Do(DC_NONE, money, dest_company)).Succeeded();
}

static constexpr auto _RenameCompany_dispatch = MakeDispatchTable<CMD_RENAME_COMPANY, const std::string &>();
bool RenameCompany::do_post(CommandCallback *callback) {
    return _RenameCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->text);
}
bool RenameCompany::do_test() {
    return (::Command<CMD_RENAME_COMPANY>::Do(DC_NONE, text)).Succeeded();
}

static constexpr auto _RenamePresident_dispatch = MakeDispatchTable<CMD_RENAME_PRESIDENT, const std::string &>();
bool RenamePresident::do_post(CommandCallback *callback) {
    return _RenamePresident_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->text);
}
bool RenamePresident::do_test() {
    return (::Command<CMD_RENAME_PRESIDENT>::Do(DC_NONE, text)).Succeeded();
}

static constexpr auto _SetCompanyManagerFace_dispatch = MakeDispatchTable<CMD_SET_COMPANY_MANAGER_FACE, CompanyManagerFace >();
bool SetCompanyManagerFace::do_post(CommandCallback *callback) {
    return _SetCompanyManagerFace_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cmf);
}
bool SetCompanyManagerFace::do_test() {
    return (::Command<CMD_SET_COMPANY_MANAGER_FACE>::Do(DC_NONE, cmf)).Succeeded();
}

static constexpr auto _SetCompanyColour_dispatch = MakeDispatchTable<CMD_SET_COMPANY_COLOUR, LiveryScheme , bool , Colours >();
bool SetCompanyColour::do_post(CommandCallback *callback) {
    return _SetCompanyColour_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->scheme, this->primary, this->colour);
}
bool SetCompanyColour::do_test() {
    return (::Command<CMD_SET_COMPANY_COLOUR>::Do(DC_NONE, scheme, primary, colour)).Succeeded();
}

static constexpr auto _RenameDepot_dispatch = MakeDispatchTable<CMD_RENAME_DEPOT, DepotID , const std::string &>();
bool RenameDepot::do_post(CommandCallback *callback) {
    return _RenameDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->depot_id, this->text);
}
bool RenameDepot::do_test() {
    return (::Command<CMD_RENAME_DEPOT>::Do(DC_NONE, depot_id, text)).Succeeded();
}

static constexpr auto _AutoreplaceVehicle_dispatch = MakeDispatchTable<CMD_AUTOREPLACE_VEHICLE, VehicleID >();
bool AutoreplaceVehicle::do_post(CommandCallback *callback) {
    return _AutoreplaceVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id);
}
bool AutoreplaceVehicle::do_test() {
    return (::Command<CMD_AUTOREPLACE_VEHICLE>::Do(DC_NONE, veh_id)).Succeeded();
}

static constexpr auto _SetAutoReplace_dispatch = MakeDispatchTable<CMD_SET_AUTOREPLACE, GroupID , EngineID , EngineID , bool >();
bool SetAutoReplace::do_post(CommandCallback *callback) {
    return _SetAutoReplace_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->id_g, this->old_engine_type, this->new_engine_type, this->when_old);
}
bool SetAutoReplace::do_test() {
    return (::Command<CMD_SET_AUTOREPLACE>::Do(DC_NONE, id_g, old_engine_type, new_engine_type, when_old)).Succeeded();
}

static constexpr auto _BuildShipDepot_dispatch = MakeDispatchTable<CMD_BUILD_SHIP_DEPOT, Axis >();
bool BuildShipDepot::do_post(CommandCallback *callback) {
    return _BuildShipDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->axis);
}
bool BuildShipDepot::do_test() {
    return (::Command<CMD_BUILD_SHIP_DEPOT>::Do(DC_NONE, this->tile, axis)).Succeeded();
}

static constexpr auto _BuildCanal_dispatch = MakeDispatchTable<CMD_BUILD_CANAL, TileIndex , WaterClass , bool >();
bool BuildCanal::do_post(CommandCallback *callback) {
    return _BuildCanal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->wc, this->diagonal);
}
bool BuildCanal::do_test() {
    return (::Command<CMD_BUILD_CANAL>::Do(DC_NONE, this->tile, start_tile, wc, diagonal)).Succeeded();
}

static constexpr auto _BuildLock_dispatch = MakeDispatchTable<CMD_BUILD_LOCK>();
bool BuildLock::do_post(CommandCallback *callback) {
    return _BuildLock_dispatch[FindCallbackIndex(callback)](this->error, this->tile);
}
bool BuildLock::do_test() {
    return (::Command<CMD_BUILD_LOCK>::Do(DC_NONE, this->tile)).Succeeded();
}

static constexpr auto _BuildLongRoad_dispatch = MakeDispatchTable<CMD_BUILD_LONG_ROAD, TileIndex , RoadType , Axis , DisallowedRoadDirections , bool , bool , bool >();
bool BuildLongRoad::do_post(CommandCallback *callback) {
    return _BuildLongRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->rt, this->axis, this->drd, this->start_half, this->end_half, this->is_ai);
}
bool BuildLongRoad::do_test() {
    return (::Command<CMD_BUILD_LONG_ROAD>::Do(DC_NONE, this->tile, start_tile, rt, axis, drd, start_half, end_half, is_ai)).Succeeded();
}

static constexpr auto _RemoveLongRoad_dispatch = MakeDispatchTable<CMD_REMOVE_LONG_ROAD, TileIndex , RoadType , Axis , bool , bool >();
bool RemoveLongRoad::do_post(CommandCallback *callback) {
    return _RemoveLongRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->rt, this->axis, this->start_half, this->end_half);
}
bool RemoveLongRoad::do_test() {
    return std::get<0>(::Command<CMD_REMOVE_LONG_ROAD>::Do(DC_NONE, this->tile, start_tile, rt, axis, start_half, end_half)).Succeeded();
}

static constexpr auto _BuildRoad_dispatch = MakeDispatchTable<CMD_BUILD_ROAD, RoadBits , RoadType , DisallowedRoadDirections , TownID >();
bool BuildRoad::do_post(CommandCallback *callback) {
    return _BuildRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->pieces, this->rt, this->toggle_drd, this->town_id);
}
bool BuildRoad::do_test() {
    return (::Command<CMD_BUILD_ROAD>::Do(DC_NONE, this->tile, pieces, rt, toggle_drd, town_id)).Succeeded();
}

static constexpr auto _BuildRoadDepot_dispatch = MakeDispatchTable<CMD_BUILD_ROAD_DEPOT, RoadType , DiagDirection >();
bool BuildRoadDepot::do_post(CommandCallback *callback) {
    return _BuildRoadDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->rt, this->dir);
}
bool BuildRoadDepot::do_test() {
    return (::Command<CMD_BUILD_ROAD_DEPOT>::Do(DC_NONE, this->tile, rt, dir)).Succeeded();
}

static constexpr auto _ConvertRoad_dispatch = MakeDispatchTable<CMD_CONVERT_ROAD, TileIndex , RoadType >();
bool ConvertRoad::do_post(CommandCallback *callback) {
    return _ConvertRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->area_start, this->to_type);
}
bool ConvertRoad::do_test() {
    return (::Command<CMD_CONVERT_ROAD>::Do(DC_NONE, this->tile, area_start, to_type)).Succeeded();
}

static constexpr auto _BuildRailroadTrack_dispatch = MakeDispatchTable<CMD_BUILD_RAILROAD_TRACK, TileIndex , RailType , Track , bool , bool >();
bool BuildRailroadTrack::do_post(CommandCallback *callback) {
    return _BuildRailroadTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->railtype, this->track, this->auto_remove_signals, this->fail_on_obstacle);
}
bool BuildRailroadTrack::do_test() {
    return (::Command<CMD_BUILD_RAILROAD_TRACK>::Do(DC_NONE, this->tile, start_tile, railtype, track, auto_remove_signals, fail_on_obstacle)).Succeeded();
}

static constexpr auto _RemoveRailroadTrack_dispatch = MakeDispatchTable<CMD_REMOVE_RAILROAD_TRACK, TileIndex , Track >();
bool RemoveRailroadTrack::do_post(CommandCallback *callback) {
    return _RemoveRailroadTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->track);
}
bool RemoveRailroadTrack::do_test() {
    return (::Command<CMD_REMOVE_RAILROAD_TRACK>::Do(DC_NONE, this->tile, start_tile, track)).Succeeded();
}

static constexpr auto _BuildSingleRail_dispatch = MakeDispatchTable<CMD_BUILD_SINGLE_RAIL, RailType , Track , bool >();
bool BuildSingleRail::do_post(CommandCallback *callback) {
    return _BuildSingleRail_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->railtype, this->track, this->auto_remove_signals);
}
bool BuildSingleRail::do_test() {
    return (::Command<CMD_BUILD_SINGLE_RAIL>::Do(DC_NONE, this->tile, railtype, track, auto_remove_signals)).Succeeded();
}

static constexpr auto _RemoveSingleRail_dispatch = MakeDispatchTable<CMD_REMOVE_SINGLE_RAIL, Track >();
bool RemoveSingleRail::do_post(CommandCallback *callback) {
    return _RemoveSingleRail_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->track);
}
bool RemoveSingleRail::do_test() {
    return (::Command<CMD_REMOVE_SINGLE_RAIL>::Do(DC_NONE, this->tile, track)).Succeeded();
}

static constexpr auto _BuildTrainDepot_dispatch = MakeDispatchTable<CMD_BUILD_TRAIN_DEPOT, RailType , DiagDirection >();
bool BuildTrainDepot::do_post(CommandCallback *callback) {
    return _BuildTrainDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->railtype, this->dir);
}
bool BuildTrainDepot::do_test() {
    return (::Command<CMD_BUILD_TRAIN_DEPOT>::Do(DC_NONE, this->tile, railtype, dir)).Succeeded();
}

static constexpr auto _BuildSingleSignal_dispatch = MakeDispatchTable<CMD_BUILD_SIGNALS, Track , SignalType , SignalVariant , bool , bool , bool , SignalType , SignalType , uint8 , byte >();
bool BuildSingleSignal::do_post(CommandCallback *callback) {
    return _BuildSingleSignal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->track, this->sigtype, this->sigvar, this->convert_signal, this->skip_existing_signals, this->ctrl_pressed, this->cycle_start, this->cycle_stop, this->num_dir_cycle, this->signals_copy);
}
bool BuildSingleSignal::do_test() {
    return (::Command<CMD_BUILD_SIGNALS>::Do(DC_NONE, this->tile, track, sigtype, sigvar, convert_signal, skip_existing_signals, ctrl_pressed, cycle_start, cycle_stop, num_dir_cycle, signals_copy)).Succeeded();
}

static constexpr auto _RemoveSingleSignal_dispatch = MakeDispatchTable<CMD_REMOVE_SIGNALS, Track >();
bool RemoveSingleSignal::do_post(CommandCallback *callback) {
    return _RemoveSingleSignal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->track);
}
bool RemoveSingleSignal::do_test() {
    return (::Command<CMD_REMOVE_SIGNALS>::Do(DC_NONE, this->tile, track)).Succeeded();
}

static constexpr auto _ConvertRail_dispatch = MakeDispatchTable<CMD_CONVERT_RAIL, TileIndex , RailType , bool >();
bool ConvertRail::do_post(CommandCallback *callback) {
    return _ConvertRail_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->area_start, this->totype, this->diagonal);
}
bool ConvertRail::do_test() {
    return (::Command<CMD_CONVERT_RAIL>::Do(DC_NONE, this->tile, area_start, totype, diagonal)).Succeeded();
}

static constexpr auto _BuildSignalTrack_dispatch = MakeDispatchTable<CMD_BUILD_SIGNAL_TRACK, TileIndex , Track , SignalType , SignalVariant , bool , bool , bool , byte >();
bool BuildSignalTrack::do_post(CommandCallback *callback) {
    return _BuildSignalTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end_tile, this->track, this->sigtype, this->sigvar, this->mode, this->autofill, this->minimise_gaps, this->signal_density);
}
bool BuildSignalTrack::do_test() {
    return (::Command<CMD_BUILD_SIGNAL_TRACK>::Do(DC_NONE, this->tile, end_tile, track, sigtype, sigvar, mode, autofill, minimise_gaps, signal_density)).Succeeded();
}

static constexpr auto _RemoveSignalTrack_dispatch = MakeDispatchTable<CMD_REMOVE_SIGNAL_TRACK, TileIndex , Track , bool >();
bool RemoveSignalTrack::do_post(CommandCallback *callback) {
    return _RemoveSignalTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end_tile, this->track, this->autofill);
}
bool RemoveSignalTrack::do_test() {
    return (::Command<CMD_REMOVE_SIGNAL_TRACK>::Do(DC_NONE, this->tile, end_tile, track, autofill)).Succeeded();
}

static constexpr auto _BuildIndustry_dispatch = MakeDispatchTable<CMD_BUILD_INDUSTRY, IndustryType , uint32 , bool , uint32 >();
bool BuildIndustry::do_post(CommandCallback *callback) {
    return _BuildIndustry_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->it, this->first_layout, this->fund, this->seed);
}
bool BuildIndustry::do_test() {
    return (::Command<CMD_BUILD_INDUSTRY>::Do(DC_NONE, this->tile, it, first_layout, fund, seed)).Succeeded();
}

static constexpr auto _IndustryCtrl_dispatch = MakeDispatchTable<CMD_INDUSTRY_CTRL, IndustryID , IndustryAction , IndustryControlFlags , Owner , const std::string &>();
bool IndustryCtrl::do_post(CommandCallback *callback) {
    return _IndustryCtrl_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->ind_id, this->action, this->ctlflags, this->company_id, this->text);
}
bool IndustryCtrl::do_test() {
    return (::Command<CMD_INDUSTRY_CTRL>::Do(DC_NONE, ind_id, action, ctlflags, company_id, text)).Succeeded();
}

static constexpr auto _BuildRailWaypoint_dispatch = MakeDispatchTable<CMD_BUILD_RAIL_WAYPOINT, Axis , byte , byte , StationClassID , byte , StationID , bool >();
bool BuildRailWaypoint::do_post(CommandCallback *callback) {
    return _BuildRailWaypoint_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->axis, this->width, this->height, this->spec_class, this->spec_index, this->station_to_join, this->adjacent);
}
bool BuildRailWaypoint::do_test() {
    return (::Command<CMD_BUILD_RAIL_WAYPOINT>::Do(DC_NONE, this->tile, axis, width, height, spec_class, spec_index, station_to_join, adjacent)).Succeeded();
}

static constexpr auto _RemoveFromRailWaypoint_dispatch = MakeDispatchTable<CMD_REMOVE_FROM_RAIL_WAYPOINT, TileIndex , bool >();
bool RemoveFromRailWaypoint::do_post(CommandCallback *callback) {
    return _RemoveFromRailWaypoint_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end, this->keep_rail);
}
bool RemoveFromRailWaypoint::do_test() {
    return (::Command<CMD_REMOVE_FROM_RAIL_WAYPOINT>::Do(DC_NONE, this->tile, end, keep_rail)).Succeeded();
}

static constexpr auto _BuildBuoy_dispatch = MakeDispatchTable<CMD_BUILD_BUOY>();
bool BuildBuoy::do_post(CommandCallback *callback) {
    return _BuildBuoy_dispatch[FindCallbackIndex(callback)](this->error, this->tile);
}
bool BuildBuoy::do_test() {
    return (::Command<CMD_BUILD_BUOY>::Do(DC_NONE, this->tile)).Succeeded();
}

static constexpr auto _RenameWaypoint_dispatch = MakeDispatchTable<CMD_RENAME_WAYPOINT, StationID , const std::string &>();
bool RenameWaypoint::do_post(CommandCallback *callback) {
    return _RenameWaypoint_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->waypoint_id, this->text);
}
bool RenameWaypoint::do_test() {
    return (::Command<CMD_RENAME_WAYPOINT>::Do(DC_NONE, waypoint_id, text)).Succeeded();
}

static constexpr auto _FoundTown_dispatch = MakeDispatchTable<CMD_FOUND_TOWN, TownSize , bool , TownLayout , bool , uint32 , const std::string &>();
bool FoundTown::do_post(CommandCallback *callback) {
    return _FoundTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->size, this->city, this->layout, this->random_location, this->townnameparts, this->text);
}
bool FoundTown::do_test() {
    return std::get<0>(::Command<CMD_FOUND_TOWN>::Do(DC_NONE, this->tile, size, city, layout, random_location, townnameparts, text)).Succeeded();
}

static constexpr auto _RenameTown_dispatch = MakeDispatchTable<CMD_RENAME_TOWN, TownID , const std::string &>();
bool RenameTown::do_post(CommandCallback *callback) {
    return _RenameTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->text);
}
bool RenameTown::do_test() {
    return (::Command<CMD_RENAME_TOWN>::Do(DC_NONE, town_id, text)).Succeeded();
}

static constexpr auto _DoTownAction_dispatch = MakeDispatchTable<CMD_DO_TOWN_ACTION, TownID , uint8 >();
bool DoTownAction::do_post(CommandCallback *callback) {
    return _DoTownAction_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->action);
}
bool DoTownAction::do_test() {
    return (::Command<CMD_DO_TOWN_ACTION>::Do(DC_NONE, town_id, action)).Succeeded();
}

static constexpr auto _TownGrowthRate_dispatch = MakeDispatchTable<CMD_TOWN_GROWTH_RATE, TownID , uint16 >();
bool TownGrowthRate::do_post(CommandCallback *callback) {
    return _TownGrowthRate_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->growth_rate);
}
bool TownGrowthRate::do_test() {
    return (::Command<CMD_TOWN_GROWTH_RATE>::Do(DC_NONE, town_id, growth_rate)).Succeeded();
}

static constexpr auto _TownRating_dispatch = MakeDispatchTable<CMD_TOWN_RATING, TownID , CompanyID , int16 >();
bool TownRating::do_post(CommandCallback *callback) {
    return _TownRating_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->company_id, this->rating);
}
bool TownRating::do_test() {
    return (::Command<CMD_TOWN_RATING>::Do(DC_NONE, town_id, company_id, rating)).Succeeded();
}

static constexpr auto _TownCargoGoal_dispatch = MakeDispatchTable<CMD_TOWN_CARGO_GOAL, TownID , TownEffect , uint32 >();
bool TownCargoGoal::do_post(CommandCallback *callback) {
    return _TownCargoGoal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->te, this->goal);
}
bool TownCargoGoal::do_test() {
    return (::Command<CMD_TOWN_CARGO_GOAL>::Do(DC_NONE, town_id, te, goal)).Succeeded();
}

static constexpr auto _TownSetText_dispatch = MakeDispatchTable<CMD_TOWN_SET_TEXT, TownID , const std::string &>();
bool TownSetText::do_post(CommandCallback *callback) {
    return _TownSetText_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->text);
}
bool TownSetText::do_test() {
    return (::Command<CMD_TOWN_SET_TEXT>::Do(DC_NONE, town_id, text)).Succeeded();
}

static constexpr auto _ExpandTown_dispatch = MakeDispatchTable<CMD_EXPAND_TOWN, TownID , uint32 >();
bool ExpandTown::do_post(CommandCallback *callback) {
    return _ExpandTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->grow_amount);
}
bool ExpandTown::do_test() {
    return (::Command<CMD_EXPAND_TOWN>::Do(DC_NONE, town_id, grow_amount)).Succeeded();
}

static constexpr auto _DeleteTown_dispatch = MakeDispatchTable<CMD_DELETE_TOWN, TownID >();
bool DeleteTown::do_post(CommandCallback *callback) {
    return _DeleteTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id);
}
bool DeleteTown::do_test() {
    return (::Command<CMD_DELETE_TOWN>::Do(DC_NONE, town_id)).Succeeded();
}

static constexpr auto _BuildObject_dispatch = MakeDispatchTable<CMD_BUILD_OBJECT, ObjectType , uint8 >();
bool BuildObject::do_post(CommandCallback *callback) {
    return _BuildObject_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->type, this->view);
}
bool BuildObject::do_test() {
    return (::Command<CMD_BUILD_OBJECT>::Do(DC_NONE, this->tile, type, view)).Succeeded();
}

static constexpr auto _BuildObjectArea_dispatch = MakeDispatchTable<CMD_BUILD_OBJECT_AREA, TileIndex , ObjectType , uint8 , bool >();
bool BuildObjectArea::do_post(CommandCallback *callback) {
    return _BuildObjectArea_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->type, this->view, this->diagonal);
}
bool BuildObjectArea::do_test() {
    return (::Command<CMD_BUILD_OBJECT_AREA>::Do(DC_NONE, this->tile, start_tile, type, view, diagonal)).Succeeded();
}

static constexpr auto _MoveRailVehicle_dispatch = MakeDispatchTable<CMD_MOVE_RAIL_VEHICLE, VehicleID , VehicleID , bool >();
bool MoveRailVehicle::do_post(CommandCallback *callback) {
    return _MoveRailVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->src_veh, this->dest_veh, this->move_chain);
}
bool MoveRailVehicle::do_test() {
    return (::Command<CMD_MOVE_RAIL_VEHICLE>::Do(DC_NONE, src_veh, dest_veh, move_chain)).Succeeded();
}

static constexpr auto _ForceTrainProceed_dispatch = MakeDispatchTable<CMD_FORCE_TRAIN_PROCEED, VehicleID >();
bool ForceTrainProceed::do_post(CommandCallback *callback) {
    return _ForceTrainProceed_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id);
}
bool ForceTrainProceed::do_test() {
    return (::Command<CMD_FORCE_TRAIN_PROCEED>::Do(DC_NONE, veh_id)).Succeeded();
}

static constexpr auto _ReverseTrainDirection_dispatch = MakeDispatchTable<CMD_REVERSE_TRAIN_DIRECTION, VehicleID , bool >();
bool ReverseTrainDirection::do_post(CommandCallback *callback) {
    return _ReverseTrainDirection_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->reverse_single_veh);
}
bool ReverseTrainDirection::do_test() {
    return (::Command<CMD_REVERSE_TRAIN_DIRECTION>::Do(DC_NONE, veh_id, reverse_single_veh)).Succeeded();
}

static constexpr auto _PlaceSign_dispatch = MakeDispatchTable<CMD_PLACE_SIGN, const std::string &>();
bool PlaceSign::do_post(CommandCallback *callback) {
    return _PlaceSign_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->text);
}
bool PlaceSign::do_test() {
    return std::get<0>(::Command<CMD_PLACE_SIGN>::Do(DC_NONE, this->tile, text)).Succeeded();
}

static constexpr auto _RenameSign_dispatch = MakeDispatchTable<CMD_RENAME_SIGN, SignID , const std::string &>();
bool RenameSign::do_post(CommandCallback *callback) {
    return _RenameSign_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->sign_id, this->text);
}
bool RenameSign::do_test() {
    return (::Command<CMD_RENAME_SIGN>::Do(DC_NONE, sign_id, text)).Succeeded();
}

static constexpr auto _BuildBridge_dispatch = MakeDispatchTable<CMD_BUILD_BRIDGE, TileIndex , TransportType , BridgeType , byte >();
bool BuildBridge::do_post(CommandCallback *callback) {
    return _BuildBridge_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->tile_start, this->transport_type, this->bridge_type, this->road_rail_type);
}
bool BuildBridge::do_test() {
    return (::Command<CMD_BUILD_BRIDGE>::Do(DC_NONE, this->tile, tile_start, transport_type, bridge_type, road_rail_type)).Succeeded();
}

static constexpr auto _BuildTunnel_dispatch = MakeDispatchTable<CMD_BUILD_TUNNEL, TransportType , byte >();
bool BuildTunnel::do_post(CommandCallback *callback) {
    return _BuildTunnel_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->transport_type, this->road_rail_type);
}
bool BuildTunnel::do_test() {
    return (::Command<CMD_BUILD_TUNNEL>::Do(DC_NONE, this->tile, transport_type, road_rail_type)).Succeeded();
}

static constexpr auto _TerraformLand_dispatch = MakeDispatchTable<CMD_TERRAFORM_LAND, Slope , bool >();
bool TerraformLand::do_post(CommandCallback *callback) {
    return _TerraformLand_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->slope, this->dir_up);
}
bool TerraformLand::do_test() {
    return std::get<0>(::Command<CMD_TERRAFORM_LAND>::Do(DC_NONE, this->tile, slope, dir_up)).Succeeded();
}

static constexpr auto _LevelLand_dispatch = MakeDispatchTable<CMD_LEVEL_LAND, TileIndex , bool , LevelMode >();
bool LevelLand::do_post(CommandCallback *callback) {
    return _LevelLand_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->diagonal, this->lm);
}
bool LevelLand::do_test() {
    return std::get<0>(::Command<CMD_LEVEL_LAND>::Do(DC_NONE, this->tile, start_tile, diagonal, lm)).Succeeded();
}

static constexpr auto _MoneyCheat_dispatch = MakeDispatchTable<CMD_MONEY_CHEAT, Money >();
bool MoneyCheat::do_post(CommandCallback *callback) {
    return _MoneyCheat_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->amount);
}
bool MoneyCheat::do_test() {
    return (::Command<CMD_MONEY_CHEAT>::Do(DC_NONE, amount)).Succeeded();
}

static constexpr auto _ChangeBankBalance_dispatch = MakeDispatchTable<CMD_CHANGE_BANK_BALANCE, Money , CompanyID , ExpensesType >();
bool ChangeBankBalance::do_post(CommandCallback *callback) {
    return _ChangeBankBalance_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->delta, this->company, this->expenses_type);
}
bool ChangeBankBalance::do_test() {
    return (::Command<CMD_CHANGE_BANK_BALANCE>::Do(DC_NONE, this->tile, delta, company, expenses_type)).Succeeded();
}

static constexpr auto _IncreaseLoan_dispatch = MakeDispatchTable<CMD_INCREASE_LOAN, LoanCommand , Money >();
bool IncreaseLoan::do_post(CommandCallback *callback) {
    return _IncreaseLoan_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cmd, this->amount);
}
bool IncreaseLoan::do_test() {
    return (::Command<CMD_INCREASE_LOAN>::Do(DC_NONE, cmd, amount)).Succeeded();
}

static constexpr auto _DecreaseLoan_dispatch = MakeDispatchTable<CMD_DECREASE_LOAN, LoanCommand , Money >();
bool DecreaseLoan::do_post(CommandCallback *callback) {
    return _DecreaseLoan_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cmd, this->amount);
}
bool DecreaseLoan::do_test() {
    return (::Command<CMD_DECREASE_LOAN>::Do(DC_NONE, cmd, amount)).Succeeded();
}

static constexpr auto _Pause_dispatch = MakeDispatchTable<CMD_PAUSE, PauseMode , bool >();
bool Pause::do_post(CommandCallback *callback) {
    return _Pause_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->mode, this->pause);
}
bool Pause::do_test() {
    return (::Command<CMD_PAUSE>::Do(DC_NONE, mode, pause)).Succeeded();
}

static constexpr auto _ModifyOrder_dispatch = MakeDispatchTable<CMD_MODIFY_ORDER, VehicleID , VehicleOrderID , ModifyOrderFlags , uint16 >();
bool ModifyOrder::do_post(CommandCallback *callback) {
    return _ModifyOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->sel_ord, this->mof, this->data);
}
bool ModifyOrder::do_test() {
    return (::Command<CMD_MODIFY_ORDER>::Do(DC_NONE, veh, sel_ord, mof, data)).Succeeded();
}

static constexpr auto _SkipToOrder_dispatch = MakeDispatchTable<CMD_SKIP_TO_ORDER, VehicleID , VehicleOrderID >();
bool SkipToOrder::do_post(CommandCallback *callback) {
    return _SkipToOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->sel_ord);
}
bool SkipToOrder::do_test() {
    return (::Command<CMD_SKIP_TO_ORDER>::Do(DC_NONE, veh_id, sel_ord)).Succeeded();
}

static constexpr auto _DeleteOrder_dispatch = MakeDispatchTable<CMD_DELETE_ORDER, VehicleID , VehicleOrderID >();
bool DeleteOrder::do_post(CommandCallback *callback) {
    return _DeleteOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->sel_ord);
}
bool DeleteOrder::do_test() {
    return (::Command<CMD_DELETE_ORDER>::Do(DC_NONE, veh_id, sel_ord)).Succeeded();
}

static constexpr auto _InsertOrder_dispatch = MakeDispatchTable<CMD_INSERT_ORDER, VehicleID , VehicleOrderID , const Order &>();
bool InsertOrder::do_post(CommandCallback *callback) {
    return _InsertOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->sel_ord, this->new_order);
}
bool InsertOrder::do_test() {
    return (::Command<CMD_INSERT_ORDER>::Do(DC_NONE, veh, sel_ord, new_order)).Succeeded();
}

static constexpr auto _OrderRefit_dispatch = MakeDispatchTable<CMD_ORDER_REFIT, VehicleID , VehicleOrderID , CargoID >();
bool OrderRefit::do_post(CommandCallback *callback) {
    return _OrderRefit_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->order_number, this->cargo);
}
bool OrderRefit::do_test() {
    return (::Command<CMD_ORDER_REFIT>::Do(DC_NONE, veh, order_number, cargo)).Succeeded();
}

static constexpr auto _CloneOrder_dispatch = MakeDispatchTable<CMD_CLONE_ORDER, CloneOptions , VehicleID , VehicleID >();
bool CloneOrder::do_post(CommandCallback *callback) {
    return _CloneOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->action, this->veh_dst, this->veh_src);
}
bool CloneOrder::do_test() {
    return (::Command<CMD_CLONE_ORDER>::Do(DC_NONE, action, veh_dst, veh_src)).Succeeded();
}

static constexpr auto _MoveOrder_dispatch = MakeDispatchTable<CMD_MOVE_ORDER, VehicleID , VehicleOrderID , VehicleOrderID >();
bool MoveOrder::do_post(CommandCallback *callback) {
    return _MoveOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->moving_order, this->target_order);
}
bool MoveOrder::do_test() {
    return (::Command<CMD_MOVE_ORDER>::Do(DC_NONE, veh, moving_order, target_order)).Succeeded();
}

static constexpr auto _ClearOrderBackup_dispatch = MakeDispatchTable<CMD_CLEAR_ORDER_BACKUP, ClientID >();
bool ClearOrderBackup::do_post(CommandCallback *callback) {
    return _ClearOrderBackup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->user_id);
}
bool ClearOrderBackup::do_test() {
    return (::Command<CMD_CLEAR_ORDER_BACKUP>::Do(DC_NONE, this->tile, user_id)).Succeeded();
}

static constexpr auto _CreateSubsidy_dispatch = MakeDispatchTable<CMD_CREATE_SUBSIDY, CargoID , SourceType , SourceID , SourceType , SourceID >();
bool CreateSubsidy::do_post(CommandCallback *callback) {
    return _CreateSubsidy_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cid, this->src_type, this->src, this->dst_type, this->dst);
}
bool CreateSubsidy::do_test() {
    return (::Command<CMD_CREATE_SUBSIDY>::Do(DC_NONE, cid, src_type, src, dst_type, dst)).Succeeded();
}

static constexpr auto _ScrollViewport_dispatch = MakeDispatchTable<CMD_SCROLL_VIEWPORT, ViewportScrollTarget , uint32 >();
bool ScrollViewport::do_post(CommandCallback *callback) {
    return _ScrollViewport_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target, this->ref);
}
bool ScrollViewport::do_test() {
    return (::Command<CMD_SCROLL_VIEWPORT>::Do(DC_NONE, this->tile, target, ref)).Succeeded();
}

static constexpr auto _BuyShareInCompany_dispatch = MakeDispatchTable<CMD_BUY_SHARE_IN_COMPANY, CompanyID >();
bool BuyShareInCompany::do_post(CommandCallback *callback) {
    return _BuyShareInCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target_company);
}
bool BuyShareInCompany::do_test() {
    return (::Command<CMD_BUY_SHARE_IN_COMPANY>::Do(DC_NONE, target_company)).Succeeded();
}

static constexpr auto _SellShareInCompany_dispatch = MakeDispatchTable<CMD_SELL_SHARE_IN_COMPANY, CompanyID >();
bool SellShareInCompany::do_post(CommandCallback *callback) {
    return _SellShareInCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target_company);
}
bool SellShareInCompany::do_test() {
    return (::Command<CMD_SELL_SHARE_IN_COMPANY>::Do(DC_NONE, target_company)).Succeeded();
}

static constexpr auto _BuyCompany_dispatch = MakeDispatchTable<CMD_BUY_COMPANY, CompanyID >();
bool BuyCompany::do_post(CommandCallback *callback) {
    return _BuyCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target_company);
}
bool BuyCompany::do_test() {
    return (::Command<CMD_BUY_COMPANY>::Do(DC_NONE, target_company)).Succeeded();
}

}  // namespace cmd
}  // namespace citymania
