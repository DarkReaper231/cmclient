// This file is generated by gen_commands.py, do not edit

#include "../../stdafx.h"
#include "cm_gen_commands.hpp"
#include "../../src/misc_cmd.h"
#include "../../src/object_cmd.h"
#include "../../src/order_cmd.h"
#include "../../src/rail_cmd.h"
#include "../../src/road_cmd.h"
#include "../../src/station_cmd.h"
#include "../../src/town_cmd.h"
#include "../../src/tunnelbridge_cmd.h"
namespace citymania {
namespace cmd {

/*
 * The code is mostly copied from network_command.cpp
 * but the table is not the same.
 */
static constexpr auto _callback_tuple = std::make_tuple(
    (CommandCallback *)nullptr, // Make sure this is actually a pointer-to-function.
    &CcBuildDocks,
    &CcPlaySound_CONSTRUCTION_WATER,
    &CcBuildPrimaryVehicle,
    &CcStartStopVehicle,
    &CcCreateGroup,
    &CcAddVehicleNewGroup,
    &CcBuildAirport,
    &CcCloneVehicle,
    &CcRoadDepot,
    &CcRoadStop,
    &CcPlaySound_CONSTRUCTION_OTHER,
    &CcBuildRoadTunnel,
    &CcRailDepot,
    &CcPlaySound_CONSTRUCTION_RAIL,
    &CcStation,
    &CcBuildRailTunnel,
    &CcBuildIndustry,
    &CcFoundRandomTown,
    &CcFoundTown,
    &CcBuildWagon,
    &CcPlaceSign,
    &CcBuildBridge,
    &CcTerraform,
    &CcPlaySound_EXPLOSION
);

inline constexpr size_t _callback_tuple_size = std::tuple_size_v<decltype(_callback_tuple)>;

#ifdef SILENCE_GCC_FUNCTION_POINTER_CAST
#   pragma GCC diagnostic push
#   pragma GCC diagnostic ignored "-Wcast-function-type"
#endif

template <size_t... i>
inline auto MakeCallbackTable(std::index_sequence<i...>) noexcept {
    return std::array<CommandCallback *, sizeof...(i)>{{ reinterpret_cast<CommandCallback *>(reinterpret_cast<void(*)()>(std::get<i>(_callback_tuple)))... }}; // MingW64 fails linking when casting a pointer to its own type. To work around, cast it to some other type first.
}
/** Type-erased table of callbacks. */
static auto _callback_table = MakeCallbackTable(std::make_index_sequence<_callback_tuple_size>{});

template <typename T> struct CallbackArgsHelper;
template <typename... Targs>
struct CallbackArgsHelper<void(*const)(Commands, const CommandCost &, Targs...)> {
    using Args = std::tuple<std::decay_t<Targs>...>;
};
#ifdef SILENCE_GCC_FUNCTION_POINTER_CAST
#   pragma GCC diagnostic pop
#endif

static size_t FindCallbackIndex(CommandCallback *callback) {
    if (auto it = std::find(std::cbegin(_callback_table), std::cend(_callback_table), callback); it != std::cend(_callback_table)) {
        return static_cast<size_t>(std::distance(std::cbegin(_callback_table), it));
    }
    return std::numeric_limits<size_t>::max();
}

template <Commands Tcmd, size_t Tcb, typename... Targs>
bool _DoPost(StringID err_msg, TileIndex tile, Targs... args) {
    return ::Command<Tcmd>::Post(err_msg, std::get<Tcb>(_callback_tuple), tile, std::forward<Targs>(args)...);
}
template <Commands Tcmd, size_t Tcb, typename... Targs>
constexpr auto MakeCallback() noexcept {
    /* Check if the callback matches with the command arguments. If not, don''t generate an Unpack proc. */
    using Tcallback = std::tuple_element_t<Tcb, decltype(_callback_tuple)>;
    if constexpr (std::is_same_v<Tcallback, CommandCallback * const> ||
            std::is_same_v<Tcallback, CommandCallbackData * const> ||
            std::is_same_v<typename CommandTraits<Tcmd>::CbArgs, typename CallbackArgsHelper<Tcallback>::Args> ||
            (!std::is_void_v<typename CommandTraits<Tcmd>::RetTypes> && std::is_same_v<typename CallbackArgsHelper<typename CommandTraits<Tcmd>::RetCallbackProc const>::Args, typename CallbackArgsHelper<Tcallback>::Args>)) {
        return &_DoPost<Tcmd, Tcb, Targs...>;
    } else {
        return nullptr;
    }
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCreateGoal(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CompanyID , GoalType , GoalTypeID , const std::string &), sizeof...(i)>{MakeCallback<CMD_CREATE_GOAL, i, CompanyID , GoalType , GoalTypeID , const std::string &>()... };
}
static constexpr auto _CreateGoal_dispatch = MakeDispatchTableCreateGoal(std::make_index_sequence<_callback_tuple_size>{});
bool CreateGoal::do_post(CommandCallback *callback) {
    return _CreateGoal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->company, this->type, this->dest, this->text);
}
bool CreateGoal::do_test() {
    return std::get<0>(::Command<CMD_CREATE_GOAL>::Do(DC_NONE, company, type, dest, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveGoal(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GoalID ), sizeof...(i)>{MakeCallback<CMD_REMOVE_GOAL, i, GoalID >()... };
}
static constexpr auto _RemoveGoal_dispatch = MakeDispatchTableRemoveGoal(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveGoal::do_post(CommandCallback *callback) {
    return _RemoveGoal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal);
}
bool RemoveGoal::do_test() {
    return (::Command<CMD_REMOVE_GOAL>::Do(DC_NONE, goal)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetGoalText(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GoalID , const std::string &), sizeof...(i)>{MakeCallback<CMD_SET_GOAL_TEXT, i, GoalID , const std::string &>()... };
}
static constexpr auto _SetGoalText_dispatch = MakeDispatchTableSetGoalText(std::make_index_sequence<_callback_tuple_size>{});
bool SetGoalText::do_post(CommandCallback *callback) {
    return _SetGoalText_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal, this->text);
}
bool SetGoalText::do_test() {
    return (::Command<CMD_SET_GOAL_TEXT>::Do(DC_NONE, goal, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetGoalProgress(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GoalID , const std::string &), sizeof...(i)>{MakeCallback<CMD_SET_GOAL_PROGRESS, i, GoalID , const std::string &>()... };
}
static constexpr auto _SetGoalProgress_dispatch = MakeDispatchTableSetGoalProgress(std::make_index_sequence<_callback_tuple_size>{});
bool SetGoalProgress::do_post(CommandCallback *callback) {
    return _SetGoalProgress_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal, this->text);
}
bool SetGoalProgress::do_test() {
    return (::Command<CMD_SET_GOAL_PROGRESS>::Do(DC_NONE, goal, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetGoalCompleted(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GoalID , bool ), sizeof...(i)>{MakeCallback<CMD_SET_GOAL_COMPLETED, i, GoalID , bool >()... };
}
static constexpr auto _SetGoalCompleted_dispatch = MakeDispatchTableSetGoalCompleted(std::make_index_sequence<_callback_tuple_size>{});
bool SetGoalCompleted::do_post(CommandCallback *callback) {
    return _SetGoalCompleted_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->goal, this->completed);
}
bool SetGoalCompleted::do_test() {
    return (::Command<CMD_SET_GOAL_COMPLETED>::Do(DC_NONE, goal, completed)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableGoalQuestion(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, uint16 , uint16 , bool , uint32 , GoalQuestionType , const std::string &), sizeof...(i)>{MakeCallback<CMD_GOAL_QUESTION, i, uint16 , uint16 , bool , uint32 , GoalQuestionType , const std::string &>()... };
}
static constexpr auto _GoalQuestion_dispatch = MakeDispatchTableGoalQuestion(std::make_index_sequence<_callback_tuple_size>{});
bool GoalQuestion::do_post(CommandCallback *callback) {
    return _GoalQuestion_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->uniqueid, this->target, this->is_client, this->button_mask, this->type, this->text);
}
bool GoalQuestion::do_test() {
    return (::Command<CMD_GOAL_QUESTION>::Do(DC_NONE, uniqueid, target, is_client, button_mask, type, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableGoalQuestionAnswer(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, uint16 , uint8 ), sizeof...(i)>{MakeCallback<CMD_GOAL_QUESTION_ANSWER, i, uint16 , uint8 >()... };
}
static constexpr auto _GoalQuestionAnswer_dispatch = MakeDispatchTableGoalQuestionAnswer(std::make_index_sequence<_callback_tuple_size>{});
bool GoalQuestionAnswer::do_post(CommandCallback *callback) {
    return _GoalQuestionAnswer_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->uniqueid, this->button);
}
bool GoalQuestionAnswer::do_test() {
    return (::Command<CMD_GOAL_QUESTION_ANSWER>::Do(DC_NONE, uniqueid, button)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCustomNewsItem(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, NewsType , NewsReferenceType , CompanyID , uint32 , const std::string &), sizeof...(i)>{MakeCallback<CMD_CUSTOM_NEWS_ITEM, i, NewsType , NewsReferenceType , CompanyID , uint32 , const std::string &>()... };
}
static constexpr auto _CustomNewsItem_dispatch = MakeDispatchTableCustomNewsItem(std::make_index_sequence<_callback_tuple_size>{});
bool CustomNewsItem::do_post(CommandCallback *callback) {
    return _CustomNewsItem_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->type, this->reftype1, this->company, this->reference, this->text);
}
bool CustomNewsItem::do_test() {
    return (::Command<CMD_CUSTOM_NEWS_ITEM>::Do(DC_NONE, type, reftype1, company, reference, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCreateStoryPage(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CompanyID , const std::string &), sizeof...(i)>{MakeCallback<CMD_CREATE_STORY_PAGE, i, CompanyID , const std::string &>()... };
}
static constexpr auto _CreateStoryPage_dispatch = MakeDispatchTableCreateStoryPage(std::make_index_sequence<_callback_tuple_size>{});
bool CreateStoryPage::do_post(CommandCallback *callback) {
    return _CreateStoryPage_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->company, this->text);
}
bool CreateStoryPage::do_test() {
    return std::get<0>(::Command<CMD_CREATE_STORY_PAGE>::Do(DC_NONE, company, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCreateStoryPageElement(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageID , StoryPageElementType , uint32 , const std::string &), sizeof...(i)>{MakeCallback<CMD_CREATE_STORY_PAGE_ELEMENT, i, StoryPageID , StoryPageElementType , uint32 , const std::string &>()... };
}
static constexpr auto _CreateStoryPageElement_dispatch = MakeDispatchTableCreateStoryPageElement(std::make_index_sequence<_callback_tuple_size>{});
bool CreateStoryPageElement::do_post(CommandCallback *callback) {
    return _CreateStoryPageElement_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id, this->type, this->reference, this->text);
}
bool CreateStoryPageElement::do_test() {
    return std::get<0>(::Command<CMD_CREATE_STORY_PAGE_ELEMENT>::Do(DC_NONE, this->tile, page_id, type, reference, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableUpdateStoryPageElement(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageElementID , uint32 , const std::string &), sizeof...(i)>{MakeCallback<CMD_UPDATE_STORY_PAGE_ELEMENT, i, StoryPageElementID , uint32 , const std::string &>()... };
}
static constexpr auto _UpdateStoryPageElement_dispatch = MakeDispatchTableUpdateStoryPageElement(std::make_index_sequence<_callback_tuple_size>{});
bool UpdateStoryPageElement::do_post(CommandCallback *callback) {
    return _UpdateStoryPageElement_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_element_id, this->reference, this->text);
}
bool UpdateStoryPageElement::do_test() {
    return (::Command<CMD_UPDATE_STORY_PAGE_ELEMENT>::Do(DC_NONE, this->tile, page_element_id, reference, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetStoryPageTitle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageID , const std::string &), sizeof...(i)>{MakeCallback<CMD_SET_STORY_PAGE_TITLE, i, StoryPageID , const std::string &>()... };
}
static constexpr auto _SetStoryPageTitle_dispatch = MakeDispatchTableSetStoryPageTitle(std::make_index_sequence<_callback_tuple_size>{});
bool SetStoryPageTitle::do_post(CommandCallback *callback) {
    return _SetStoryPageTitle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id, this->text);
}
bool SetStoryPageTitle::do_test() {
    return (::Command<CMD_SET_STORY_PAGE_TITLE>::Do(DC_NONE, page_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetStoryPageDate(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageID , Date ), sizeof...(i)>{MakeCallback<CMD_SET_STORY_PAGE_DATE, i, StoryPageID , Date >()... };
}
static constexpr auto _SetStoryPageDate_dispatch = MakeDispatchTableSetStoryPageDate(std::make_index_sequence<_callback_tuple_size>{});
bool SetStoryPageDate::do_post(CommandCallback *callback) {
    return _SetStoryPageDate_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id, this->date);
}
bool SetStoryPageDate::do_test() {
    return (::Command<CMD_SET_STORY_PAGE_DATE>::Do(DC_NONE, page_id, date)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableShowStoryPage(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageID ), sizeof...(i)>{MakeCallback<CMD_SHOW_STORY_PAGE, i, StoryPageID >()... };
}
static constexpr auto _ShowStoryPage_dispatch = MakeDispatchTableShowStoryPage(std::make_index_sequence<_callback_tuple_size>{});
bool ShowStoryPage::do_post(CommandCallback *callback) {
    return _ShowStoryPage_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id);
}
bool ShowStoryPage::do_test() {
    return (::Command<CMD_SHOW_STORY_PAGE>::Do(DC_NONE, page_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveStoryPage(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageID ), sizeof...(i)>{MakeCallback<CMD_REMOVE_STORY_PAGE, i, StoryPageID >()... };
}
static constexpr auto _RemoveStoryPage_dispatch = MakeDispatchTableRemoveStoryPage(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveStoryPage::do_post(CommandCallback *callback) {
    return _RemoveStoryPage_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_id);
}
bool RemoveStoryPage::do_test() {
    return (::Command<CMD_REMOVE_STORY_PAGE>::Do(DC_NONE, page_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveStoryPageElement(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageElementID ), sizeof...(i)>{MakeCallback<CMD_REMOVE_STORY_PAGE_ELEMENT, i, StoryPageElementID >()... };
}
static constexpr auto _RemoveStoryPageElement_dispatch = MakeDispatchTableRemoveStoryPageElement(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveStoryPageElement::do_post(CommandCallback *callback) {
    return _RemoveStoryPageElement_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_element_id);
}
bool RemoveStoryPageElement::do_test() {
    return (::Command<CMD_REMOVE_STORY_PAGE_ELEMENT>::Do(DC_NONE, page_element_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableStoryPageButton(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StoryPageElementID , VehicleID ), sizeof...(i)>{MakeCallback<CMD_STORY_PAGE_BUTTON, i, StoryPageElementID , VehicleID >()... };
}
static constexpr auto _StoryPageButton_dispatch = MakeDispatchTableStoryPageButton(std::make_index_sequence<_callback_tuple_size>{});
bool StoryPageButton::do_post(CommandCallback *callback) {
    return _StoryPageButton_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->page_element_id, this->reference);
}
bool StoryPageButton::do_test() {
    return (::Command<CMD_STORY_PAGE_BUTTON>::Do(DC_NONE, this->tile, page_element_id, reference)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, EngineID , bool , CargoID , ClientID ), sizeof...(i)>{MakeCallback<CMD_BUILD_VEHICLE, i, EngineID , bool , CargoID , ClientID >()... };
}
static constexpr auto _BuildVehicle_dispatch = MakeDispatchTableBuildVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool BuildVehicle::do_post(CommandCallback *callback) {
    return _BuildVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->eid, this->use_free_vehicles, this->cargo, this->client_id);
}
bool BuildVehicle::do_test() {
    return std::get<0>(::Command<CMD_BUILD_VEHICLE>::Do(DC_NONE, this->tile, eid, use_free_vehicles, cargo, client_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSellVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , bool , bool , ClientID ), sizeof...(i)>{MakeCallback<CMD_SELL_VEHICLE, i, VehicleID , bool , bool , ClientID >()... };
}
static constexpr auto _SellVehicle_dispatch = MakeDispatchTableSellVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool SellVehicle::do_post(CommandCallback *callback) {
    return _SellVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->v_id, this->sell_chain, this->backup_order, this->client_id);
}
bool SellVehicle::do_test() {
    return (::Command<CMD_SELL_VEHICLE>::Do(DC_NONE, v_id, sell_chain, backup_order, client_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRefitVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , CargoID , byte , bool , bool , uint8 ), sizeof...(i)>{MakeCallback<CMD_REFIT_VEHICLE, i, VehicleID , CargoID , byte , bool , bool , uint8 >()... };
}
static constexpr auto _RefitVehicle_dispatch = MakeDispatchTableRefitVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool RefitVehicle::do_post(CommandCallback *callback) {
    return _RefitVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->new_cid, this->new_subtype, this->auto_refit, this->only_this, this->num_vehicles);
}
bool RefitVehicle::do_test() {
    return std::get<0>(::Command<CMD_REFIT_VEHICLE>::Do(DC_NONE, veh_id, new_cid, new_subtype, auto_refit, only_this, num_vehicles)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSendVehicleToDepot(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , DepotCommand , const VehicleListIdentifier &), sizeof...(i)>{MakeCallback<CMD_SEND_VEHICLE_TO_DEPOT, i, VehicleID , DepotCommand , const VehicleListIdentifier &>()... };
}
static constexpr auto _SendVehicleToDepot_dispatch = MakeDispatchTableSendVehicleToDepot(std::make_index_sequence<_callback_tuple_size>{});
bool SendVehicleToDepot::do_post(CommandCallback *callback) {
    return _SendVehicleToDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->depot_cmd, this->vli);
}
bool SendVehicleToDepot::do_test() {
    return (::Command<CMD_SEND_VEHICLE_TO_DEPOT>::Do(DC_NONE, veh_id, depot_cmd, vli)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableChangeServiceInt(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , uint16 , bool , bool ), sizeof...(i)>{MakeCallback<CMD_CHANGE_SERVICE_INT, i, VehicleID , uint16 , bool , bool >()... };
}
static constexpr auto _ChangeServiceInt_dispatch = MakeDispatchTableChangeServiceInt(std::make_index_sequence<_callback_tuple_size>{});
bool ChangeServiceInt::do_post(CommandCallback *callback) {
    return _ChangeServiceInt_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->serv_int, this->is_custom, this->is_percent);
}
bool ChangeServiceInt::do_test() {
    return (::Command<CMD_CHANGE_SERVICE_INT>::Do(DC_NONE, veh_id, serv_int, is_custom, is_percent)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_VEHICLE, i, VehicleID , const std::string &>()... };
}
static constexpr auto _RenameVehicle_dispatch = MakeDispatchTableRenameVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool RenameVehicle::do_post(CommandCallback *callback) {
    return _RenameVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->text);
}
bool RenameVehicle::do_test() {
    return (::Command<CMD_RENAME_VEHICLE>::Do(DC_NONE, veh_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCloneVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , bool ), sizeof...(i)>{MakeCallback<CMD_CLONE_VEHICLE, i, VehicleID , bool >()... };
}
static constexpr auto _CloneVehicle_dispatch = MakeDispatchTableCloneVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool CloneVehicle::do_post(CommandCallback *callback) {
    return _CloneVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->share_orders);
}
bool CloneVehicle::do_test() {
    return std::get<0>(::Command<CMD_CLONE_VEHICLE>::Do(DC_NONE, this->tile, veh_id, share_orders)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableStartStopVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , bool ), sizeof...(i)>{MakeCallback<CMD_START_STOP_VEHICLE, i, VehicleID , bool >()... };
}
static constexpr auto _StartStopVehicle_dispatch = MakeDispatchTableStartStopVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool StartStopVehicle::do_post(CommandCallback *callback) {
    return _StartStopVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->evaluate_startstop_cb);
}
bool StartStopVehicle::do_test() {
    return (::Command<CMD_START_STOP_VEHICLE>::Do(DC_NONE, veh_id, evaluate_startstop_cb)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableMassStartStopVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, bool , bool , const VehicleListIdentifier &), sizeof...(i)>{MakeCallback<CMD_MASS_START_STOP, i, bool , bool , const VehicleListIdentifier &>()... };
}
static constexpr auto _MassStartStopVehicle_dispatch = MakeDispatchTableMassStartStopVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool MassStartStopVehicle::do_post(CommandCallback *callback) {
    return _MassStartStopVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->do_start, this->vehicle_list_window, this->vli);
}
bool MassStartStopVehicle::do_test() {
    return (::Command<CMD_MASS_START_STOP>::Do(DC_NONE, this->tile, do_start, vehicle_list_window, vli)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableDepotSellAllVehicles(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleType ), sizeof...(i)>{MakeCallback<CMD_DEPOT_SELL_ALL_VEHICLES, i, VehicleType >()... };
}
static constexpr auto _DepotSellAllVehicles_dispatch = MakeDispatchTableDepotSellAllVehicles(std::make_index_sequence<_callback_tuple_size>{});
bool DepotSellAllVehicles::do_post(CommandCallback *callback) {
    return _DepotSellAllVehicles_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->vehicle_type);
}
bool DepotSellAllVehicles::do_test() {
    return (::Command<CMD_DEPOT_SELL_ALL_VEHICLES>::Do(DC_NONE, this->tile, vehicle_type)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableDepotMassAutoReplace(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleType ), sizeof...(i)>{MakeCallback<CMD_DEPOT_MASS_AUTOREPLACE, i, VehicleType >()... };
}
static constexpr auto _DepotMassAutoReplace_dispatch = MakeDispatchTableDepotMassAutoReplace(std::make_index_sequence<_callback_tuple_size>{});
bool DepotMassAutoReplace::do_post(CommandCallback *callback) {
    return _DepotMassAutoReplace_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->vehicle_type);
}
bool DepotMassAutoReplace::do_test() {
    return (::Command<CMD_DEPOT_MASS_AUTOREPLACE>::Do(DC_NONE, this->tile, vehicle_type)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableChangeSetting(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, const std::string &, int32 ), sizeof...(i)>{MakeCallback<CMD_CHANGE_SETTING, i, const std::string &, int32 >()... };
}
static constexpr auto _ChangeSetting_dispatch = MakeDispatchTableChangeSetting(std::make_index_sequence<_callback_tuple_size>{});
bool ChangeSetting::do_post(CommandCallback *callback) {
    return _ChangeSetting_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->name, this->value);
}
bool ChangeSetting::do_test() {
    return (::Command<CMD_CHANGE_SETTING>::Do(DC_NONE, name, value)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableChangeCompanySetting(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, const std::string &, int32 ), sizeof...(i)>{MakeCallback<CMD_CHANGE_COMPANY_SETTING, i, const std::string &, int32 >()... };
}
static constexpr auto _ChangeCompanySetting_dispatch = MakeDispatchTableChangeCompanySetting(std::make_index_sequence<_callback_tuple_size>{});
bool ChangeCompanySetting::do_post(CommandCallback *callback) {
    return _ChangeCompanySetting_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->name, this->value);
}
bool ChangeCompanySetting::do_test() {
    return (::Command<CMD_CHANGE_COMPANY_SETTING>::Do(DC_NONE, name, value)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCreateGroup(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleType , GroupID ), sizeof...(i)>{MakeCallback<CMD_CREATE_GROUP, i, VehicleType , GroupID >()... };
}
static constexpr auto _CreateGroup_dispatch = MakeDispatchTableCreateGroup(std::make_index_sequence<_callback_tuple_size>{});
bool CreateGroup::do_post(CommandCallback *callback) {
    return _CreateGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->vt, this->parent_group);
}
bool CreateGroup::do_test() {
    return std::get<0>(::Command<CMD_CREATE_GROUP>::Do(DC_NONE, vt, parent_group)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableAlterGroup(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, AlterGroupMode , GroupID , GroupID , const std::string &), sizeof...(i)>{MakeCallback<CMD_ALTER_GROUP, i, AlterGroupMode , GroupID , GroupID , const std::string &>()... };
}
static constexpr auto _AlterGroup_dispatch = MakeDispatchTableAlterGroup(std::make_index_sequence<_callback_tuple_size>{});
bool AlterGroup::do_post(CommandCallback *callback) {
    return _AlterGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->mode, this->group_id, this->parent_id, this->text);
}
bool AlterGroup::do_test() {
    return (::Command<CMD_ALTER_GROUP>::Do(DC_NONE, mode, group_id, parent_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableDeleteGroup(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GroupID ), sizeof...(i)>{MakeCallback<CMD_DELETE_GROUP, i, GroupID >()... };
}
static constexpr auto _DeleteGroup_dispatch = MakeDispatchTableDeleteGroup(std::make_index_sequence<_callback_tuple_size>{});
bool DeleteGroup::do_post(CommandCallback *callback) {
    return _DeleteGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id);
}
bool DeleteGroup::do_test() {
    return (::Command<CMD_DELETE_GROUP>::Do(DC_NONE, group_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableAddVehicleGroup(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GroupID , VehicleID , bool ), sizeof...(i)>{MakeCallback<CMD_ADD_VEHICLE_GROUP, i, GroupID , VehicleID , bool >()... };
}
static constexpr auto _AddVehicleGroup_dispatch = MakeDispatchTableAddVehicleGroup(std::make_index_sequence<_callback_tuple_size>{});
bool AddVehicleGroup::do_post(CommandCallback *callback) {
    return _AddVehicleGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id, this->veh_id, this->add_shared);
}
bool AddVehicleGroup::do_test() {
    return std::get<0>(::Command<CMD_ADD_VEHICLE_GROUP>::Do(DC_NONE, group_id, veh_id, add_shared)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableAddSharedVehicleGroup(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GroupID , VehicleType ), sizeof...(i)>{MakeCallback<CMD_ADD_SHARED_VEHICLE_GROUP, i, GroupID , VehicleType >()... };
}
static constexpr auto _AddSharedVehicleGroup_dispatch = MakeDispatchTableAddSharedVehicleGroup(std::make_index_sequence<_callback_tuple_size>{});
bool AddSharedVehicleGroup::do_post(CommandCallback *callback) {
    return _AddSharedVehicleGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->id_g, this->type);
}
bool AddSharedVehicleGroup::do_test() {
    return (::Command<CMD_ADD_SHARED_VEHICLE_GROUP>::Do(DC_NONE, id_g, type)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveAllVehiclesGroup(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GroupID ), sizeof...(i)>{MakeCallback<CMD_REMOVE_ALL_VEHICLES_GROUP, i, GroupID >()... };
}
static constexpr auto _RemoveAllVehiclesGroup_dispatch = MakeDispatchTableRemoveAllVehiclesGroup(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveAllVehiclesGroup::do_post(CommandCallback *callback) {
    return _RemoveAllVehiclesGroup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id);
}
bool RemoveAllVehiclesGroup::do_test() {
    return (::Command<CMD_REMOVE_ALL_VEHICLES_GROUP>::Do(DC_NONE, group_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetGroupFlag(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GroupID , GroupFlags , bool , bool ), sizeof...(i)>{MakeCallback<CMD_SET_GROUP_FLAG, i, GroupID , GroupFlags , bool , bool >()... };
}
static constexpr auto _SetGroupFlag_dispatch = MakeDispatchTableSetGroupFlag(std::make_index_sequence<_callback_tuple_size>{});
bool SetGroupFlag::do_post(CommandCallback *callback) {
    return _SetGroupFlag_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id, this->flag, this->value, this->recursive);
}
bool SetGroupFlag::do_test() {
    return (::Command<CMD_SET_GROUP_FLAG>::Do(DC_NONE, group_id, flag, value, recursive)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetGroupLivery(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GroupID , bool , Colours ), sizeof...(i)>{MakeCallback<CMD_SET_GROUP_LIVERY, i, GroupID , bool , Colours >()... };
}
static constexpr auto _SetGroupLivery_dispatch = MakeDispatchTableSetGroupLivery(std::make_index_sequence<_callback_tuple_size>{});
bool SetGroupLivery::do_post(CommandCallback *callback) {
    return _SetGroupLivery_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->group_id, this->primary, this->colour);
}
bool SetGroupLivery::do_test() {
    return (::Command<CMD_SET_GROUP_LIVERY>::Do(DC_NONE, group_id, primary, colour)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableTurnRoadVeh(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID ), sizeof...(i)>{MakeCallback<CMD_TURN_ROADVEH, i, VehicleID >()... };
}
static constexpr auto _TurnRoadVeh_dispatch = MakeDispatchTableTurnRoadVeh(std::make_index_sequence<_callback_tuple_size>{});
bool TurnRoadVeh::do_post(CommandCallback *callback) {
    return _TurnRoadVeh_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id);
}
bool TurnRoadVeh::do_test() {
    return (::Command<CMD_TURN_ROADVEH>::Do(DC_NONE, veh_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableChangeTimetable(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleOrderID , ModifyTimetableFlags , uint16 ), sizeof...(i)>{MakeCallback<CMD_CHANGE_TIMETABLE, i, VehicleID , VehicleOrderID , ModifyTimetableFlags , uint16 >()... };
}
static constexpr auto _ChangeTimetable_dispatch = MakeDispatchTableChangeTimetable(std::make_index_sequence<_callback_tuple_size>{});
bool ChangeTimetable::do_post(CommandCallback *callback) {
    return _ChangeTimetable_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->order_number, this->mtf, this->data);
}
bool ChangeTimetable::do_test() {
    return (::Command<CMD_CHANGE_TIMETABLE>::Do(DC_NONE, veh, order_number, mtf, data)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetVehicleOnTime(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID ), sizeof...(i)>{MakeCallback<CMD_SET_VEHICLE_ON_TIME, i, VehicleID >()... };
}
static constexpr auto _SetVehicleOnTime_dispatch = MakeDispatchTableSetVehicleOnTime(std::make_index_sequence<_callback_tuple_size>{});
bool SetVehicleOnTime::do_post(CommandCallback *callback) {
    return _SetVehicleOnTime_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh);
}
bool SetVehicleOnTime::do_test() {
    return (::Command<CMD_SET_VEHICLE_ON_TIME>::Do(DC_NONE, veh)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableAutofillTimetable(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , bool , bool ), sizeof...(i)>{MakeCallback<CMD_AUTOFILL_TIMETABLE, i, VehicleID , bool , bool >()... };
}
static constexpr auto _AutofillTimetable_dispatch = MakeDispatchTableAutofillTimetable(std::make_index_sequence<_callback_tuple_size>{});
bool AutofillTimetable::do_post(CommandCallback *callback) {
    return _AutofillTimetable_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->autofill, this->preserve_wait_time);
}
bool AutofillTimetable::do_test() {
    return (::Command<CMD_AUTOFILL_TIMETABLE>::Do(DC_NONE, veh, autofill, preserve_wait_time)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetTimetableStart(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , bool , Date ), sizeof...(i)>{MakeCallback<CMD_SET_TIMETABLE_START, i, VehicleID , bool , Date >()... };
}
static constexpr auto _SetTimetableStart_dispatch = MakeDispatchTableSetTimetableStart(std::make_index_sequence<_callback_tuple_size>{});
bool SetTimetableStart::do_post(CommandCallback *callback) {
    return _SetTimetableStart_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->timetable_all, this->start_date);
}
bool SetTimetableStart::do_test() {
    return (::Command<CMD_SET_TIMETABLE_START>::Do(DC_NONE, veh_id, timetable_all, start_date)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableWantEnginePreview(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, EngineID ), sizeof...(i)>{MakeCallback<CMD_WANT_ENGINE_PREVIEW, i, EngineID >()... };
}
static constexpr auto _WantEnginePreview_dispatch = MakeDispatchTableWantEnginePreview(std::make_index_sequence<_callback_tuple_size>{});
bool WantEnginePreview::do_post(CommandCallback *callback) {
    return _WantEnginePreview_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id);
}
bool WantEnginePreview::do_test() {
    return (::Command<CMD_WANT_ENGINE_PREVIEW>::Do(DC_NONE, engine_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableEngineCtrl(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, EngineID , CompanyID , bool ), sizeof...(i)>{MakeCallback<CMD_ENGINE_CTRL, i, EngineID , CompanyID , bool >()... };
}
static constexpr auto _EngineCtrl_dispatch = MakeDispatchTableEngineCtrl(std::make_index_sequence<_callback_tuple_size>{});
bool EngineCtrl::do_post(CommandCallback *callback) {
    return _EngineCtrl_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id, this->company_id, this->allow);
}
bool EngineCtrl::do_test() {
    return (::Command<CMD_ENGINE_CTRL>::Do(DC_NONE, engine_id, company_id, allow)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameEngine(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, EngineID , const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_ENGINE, i, EngineID , const std::string &>()... };
}
static constexpr auto _RenameEngine_dispatch = MakeDispatchTableRenameEngine(std::make_index_sequence<_callback_tuple_size>{});
bool RenameEngine::do_post(CommandCallback *callback) {
    return _RenameEngine_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id, this->text);
}
bool RenameEngine::do_test() {
    return (::Command<CMD_RENAME_ENGINE>::Do(DC_NONE, engine_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetVehicleVisibility(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, EngineID , bool ), sizeof...(i)>{MakeCallback<CMD_SET_VEHICLE_VISIBILITY, i, EngineID , bool >()... };
}
static constexpr auto _SetVehicleVisibility_dispatch = MakeDispatchTableSetVehicleVisibility(std::make_index_sequence<_callback_tuple_size>{});
bool SetVehicleVisibility::do_post(CommandCallback *callback) {
    return _SetVehicleVisibility_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->engine_id, this->hide);
}
bool SetVehicleVisibility::do_test() {
    return (::Command<CMD_SET_VEHICLE_VISIBILITY>::Do(DC_NONE, engine_id, hide)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTablePlantTree(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , byte ), sizeof...(i)>{MakeCallback<CMD_PLANT_TREE, i, TileIndex , byte >()... };
}
static constexpr auto _PlantTree_dispatch = MakeDispatchTablePlantTree(std::make_index_sequence<_callback_tuple_size>{});
bool PlantTree::do_post(CommandCallback *callback) {
    return _PlantTree_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->tree_to_plant);
}
bool PlantTree::do_test() {
    return (::Command<CMD_PLANT_TREE>::Do(DC_NONE, this->tile, start_tile, tree_to_plant)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableLandscapeClear(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile), sizeof...(i)>{MakeCallback<CMD_LANDSCAPE_CLEAR, i>()... };
}
static constexpr auto _LandscapeClear_dispatch = MakeDispatchTableLandscapeClear(std::make_index_sequence<_callback_tuple_size>{});
bool LandscapeClear::do_post(CommandCallback *callback) {
    return _LandscapeClear_dispatch[FindCallbackIndex(callback)](this->error, this->tile);
}
bool LandscapeClear::do_test() {
    return (::Command<CMD_LANDSCAPE_CLEAR>::Do(DC_NONE, this->tile)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableClearArea(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , bool ), sizeof...(i)>{MakeCallback<CMD_CLEAR_AREA, i, TileIndex , bool >()... };
}
static constexpr auto _ClearArea_dispatch = MakeDispatchTableClearArea(std::make_index_sequence<_callback_tuple_size>{});
bool ClearArea::do_post(CommandCallback *callback) {
    return _ClearArea_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->diagonal);
}
bool ClearArea::do_test() {
    return std::get<0>(::Command<CMD_CLEAR_AREA>::Do(DC_NONE, this->tile, start_tile, diagonal)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildAirport(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, byte , byte , StationID , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_AIRPORT, i, byte , byte , StationID , bool >()... };
}
static constexpr auto _BuildAirport_dispatch = MakeDispatchTableBuildAirport(std::make_index_sequence<_callback_tuple_size>{});
bool BuildAirport::do_post(CommandCallback *callback) {
    return _BuildAirport_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->airport_type, this->layout, this->station_to_join, this->adjacent);
}
bool BuildAirport::do_test() {
    return (::Command<CMD_BUILD_AIRPORT>::Do(DC_NONE, this->tile, airport_type, layout, station_to_join, adjacent)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildDock(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StationID , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_DOCK, i, StationID , bool >()... };
}
static constexpr auto _BuildDock_dispatch = MakeDispatchTableBuildDock(std::make_index_sequence<_callback_tuple_size>{});
bool BuildDock::do_post(CommandCallback *callback) {
    return _BuildDock_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->station_to_join, this->adjacent);
}
bool BuildDock::do_test() {
    return (::Command<CMD_BUILD_DOCK>::Do(DC_NONE, this->tile, station_to_join, adjacent)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildRailStation(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, RailType , Axis , byte , byte , StationClassID , byte , StationID , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_RAIL_STATION, i, RailType , Axis , byte , byte , StationClassID , byte , StationID , bool >()... };
}
static constexpr auto _BuildRailStation_dispatch = MakeDispatchTableBuildRailStation(std::make_index_sequence<_callback_tuple_size>{});
bool BuildRailStation::do_post(CommandCallback *callback) {
    return _BuildRailStation_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->rt, this->axis, this->numtracks, this->plat_len, this->spec_class, this->spec_index, this->station_to_join, this->adjacent);
}
bool BuildRailStation::do_test() {
    return (::Command<CMD_BUILD_RAIL_STATION>::Do(DC_NONE, this->tile, rt, axis, numtracks, plat_len, spec_class, spec_index, station_to_join, adjacent)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveFromRailStation(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , bool ), sizeof...(i)>{MakeCallback<CMD_REMOVE_FROM_RAIL_STATION, i, TileIndex , bool >()... };
}
static constexpr auto _RemoveFromRailStation_dispatch = MakeDispatchTableRemoveFromRailStation(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveFromRailStation::do_post(CommandCallback *callback) {
    return _RemoveFromRailStation_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end, this->keep_rail);
}
bool RemoveFromRailStation::do_test() {
    return (::Command<CMD_REMOVE_FROM_RAIL_STATION>::Do(DC_NONE, this->tile, end, keep_rail)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildRoadStop(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, uint8 , uint8 , RoadStopType , bool , DiagDirection , RoadType , StationID , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_ROAD_STOP, i, uint8 , uint8 , RoadStopType , bool , DiagDirection , RoadType , StationID , bool >()... };
}
static constexpr auto _BuildRoadStop_dispatch = MakeDispatchTableBuildRoadStop(std::make_index_sequence<_callback_tuple_size>{});
bool BuildRoadStop::do_post(CommandCallback *callback) {
    return _BuildRoadStop_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->width, this->length, this->stop_type, this->is_drive_through, this->ddir, this->rt, this->station_to_join, this->adjacent);
}
bool BuildRoadStop::do_test() {
    return (::Command<CMD_BUILD_ROAD_STOP>::Do(DC_NONE, this->tile, width, length, stop_type, is_drive_through, ddir, rt, station_to_join, adjacent)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveRoadStop(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, uint8 , uint8 , RoadStopType , bool ), sizeof...(i)>{MakeCallback<CMD_REMOVE_ROAD_STOP, i, uint8 , uint8 , RoadStopType , bool >()... };
}
static constexpr auto _RemoveRoadStop_dispatch = MakeDispatchTableRemoveRoadStop(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveRoadStop::do_post(CommandCallback *callback) {
    return _RemoveRoadStop_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->width, this->height, this->stop_type, this->remove_road);
}
bool RemoveRoadStop::do_test() {
    return (::Command<CMD_REMOVE_ROAD_STOP>::Do(DC_NONE, this->tile, width, height, stop_type, remove_road)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameStation(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StationID , const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_STATION, i, StationID , const std::string &>()... };
}
static constexpr auto _RenameStation_dispatch = MakeDispatchTableRenameStation(std::make_index_sequence<_callback_tuple_size>{});
bool RenameStation::do_post(CommandCallback *callback) {
    return _RenameStation_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->station_id, this->text);
}
bool RenameStation::do_test() {
    return (::Command<CMD_RENAME_STATION>::Do(DC_NONE, station_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableOpenCloseAirport(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StationID ), sizeof...(i)>{MakeCallback<CMD_OPEN_CLOSE_AIRPORT, i, StationID >()... };
}
static constexpr auto _OpenCloseAirport_dispatch = MakeDispatchTableOpenCloseAirport(std::make_index_sequence<_callback_tuple_size>{});
bool OpenCloseAirport::do_post(CommandCallback *callback) {
    return _OpenCloseAirport_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->station_id);
}
bool OpenCloseAirport::do_test() {
    return (::Command<CMD_OPEN_CLOSE_AIRPORT>::Do(DC_NONE, station_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCompanyCtrl(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CompanyCtrlAction , CompanyID , CompanyRemoveReason , ClientID ), sizeof...(i)>{MakeCallback<CMD_COMPANY_CTRL, i, CompanyCtrlAction , CompanyID , CompanyRemoveReason , ClientID >()... };
}
static constexpr auto _CompanyCtrl_dispatch = MakeDispatchTableCompanyCtrl(std::make_index_sequence<_callback_tuple_size>{});
bool CompanyCtrl::do_post(CommandCallback *callback) {
    return _CompanyCtrl_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cca, this->company_id, this->reason, this->client_id);
}
bool CompanyCtrl::do_test() {
    return (::Command<CMD_COMPANY_CTRL>::Do(DC_NONE, cca, company_id, reason, client_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableGiveMoney(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, uint32 , CompanyID ), sizeof...(i)>{MakeCallback<CMD_GIVE_MONEY, i, uint32 , CompanyID >()... };
}
static constexpr auto _GiveMoney_dispatch = MakeDispatchTableGiveMoney(std::make_index_sequence<_callback_tuple_size>{});
bool GiveMoney::do_post(CommandCallback *callback) {
    return _GiveMoney_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->money, this->dest_company);
}
bool GiveMoney::do_test() {
    return (::Command<CMD_GIVE_MONEY>::Do(DC_NONE, money, dest_company)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameCompany(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_COMPANY, i, const std::string &>()... };
}
static constexpr auto _RenameCompany_dispatch = MakeDispatchTableRenameCompany(std::make_index_sequence<_callback_tuple_size>{});
bool RenameCompany::do_post(CommandCallback *callback) {
    return _RenameCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->text);
}
bool RenameCompany::do_test() {
    return (::Command<CMD_RENAME_COMPANY>::Do(DC_NONE, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenamePresident(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_PRESIDENT, i, const std::string &>()... };
}
static constexpr auto _RenamePresident_dispatch = MakeDispatchTableRenamePresident(std::make_index_sequence<_callback_tuple_size>{});
bool RenamePresident::do_post(CommandCallback *callback) {
    return _RenamePresident_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->text);
}
bool RenamePresident::do_test() {
    return (::Command<CMD_RENAME_PRESIDENT>::Do(DC_NONE, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetCompanyManagerFace(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CompanyManagerFace ), sizeof...(i)>{MakeCallback<CMD_SET_COMPANY_MANAGER_FACE, i, CompanyManagerFace >()... };
}
static constexpr auto _SetCompanyManagerFace_dispatch = MakeDispatchTableSetCompanyManagerFace(std::make_index_sequence<_callback_tuple_size>{});
bool SetCompanyManagerFace::do_post(CommandCallback *callback) {
    return _SetCompanyManagerFace_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cmf);
}
bool SetCompanyManagerFace::do_test() {
    return (::Command<CMD_SET_COMPANY_MANAGER_FACE>::Do(DC_NONE, cmf)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetCompanyColour(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, LiveryScheme , bool , Colours ), sizeof...(i)>{MakeCallback<CMD_SET_COMPANY_COLOUR, i, LiveryScheme , bool , Colours >()... };
}
static constexpr auto _SetCompanyColour_dispatch = MakeDispatchTableSetCompanyColour(std::make_index_sequence<_callback_tuple_size>{});
bool SetCompanyColour::do_post(CommandCallback *callback) {
    return _SetCompanyColour_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->scheme, this->primary, this->colour);
}
bool SetCompanyColour::do_test() {
    return (::Command<CMD_SET_COMPANY_COLOUR>::Do(DC_NONE, scheme, primary, colour)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameDepot(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, DepotID , const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_DEPOT, i, DepotID , const std::string &>()... };
}
static constexpr auto _RenameDepot_dispatch = MakeDispatchTableRenameDepot(std::make_index_sequence<_callback_tuple_size>{});
bool RenameDepot::do_post(CommandCallback *callback) {
    return _RenameDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->depot_id, this->text);
}
bool RenameDepot::do_test() {
    return (::Command<CMD_RENAME_DEPOT>::Do(DC_NONE, depot_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableAutoreplaceVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID ), sizeof...(i)>{MakeCallback<CMD_AUTOREPLACE_VEHICLE, i, VehicleID >()... };
}
static constexpr auto _AutoreplaceVehicle_dispatch = MakeDispatchTableAutoreplaceVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool AutoreplaceVehicle::do_post(CommandCallback *callback) {
    return _AutoreplaceVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id);
}
bool AutoreplaceVehicle::do_test() {
    return (::Command<CMD_AUTOREPLACE_VEHICLE>::Do(DC_NONE, veh_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSetAutoReplace(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, GroupID , EngineID , EngineID , bool ), sizeof...(i)>{MakeCallback<CMD_SET_AUTOREPLACE, i, GroupID , EngineID , EngineID , bool >()... };
}
static constexpr auto _SetAutoReplace_dispatch = MakeDispatchTableSetAutoReplace(std::make_index_sequence<_callback_tuple_size>{});
bool SetAutoReplace::do_post(CommandCallback *callback) {
    return _SetAutoReplace_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->id_g, this->old_engine_type, this->new_engine_type, this->when_old);
}
bool SetAutoReplace::do_test() {
    return (::Command<CMD_SET_AUTOREPLACE>::Do(DC_NONE, id_g, old_engine_type, new_engine_type, when_old)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildShipDepot(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Axis ), sizeof...(i)>{MakeCallback<CMD_BUILD_SHIP_DEPOT, i, Axis >()... };
}
static constexpr auto _BuildShipDepot_dispatch = MakeDispatchTableBuildShipDepot(std::make_index_sequence<_callback_tuple_size>{});
bool BuildShipDepot::do_post(CommandCallback *callback) {
    return _BuildShipDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->axis);
}
bool BuildShipDepot::do_test() {
    return (::Command<CMD_BUILD_SHIP_DEPOT>::Do(DC_NONE, this->tile, axis)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildCanal(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , WaterClass , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_CANAL, i, TileIndex , WaterClass , bool >()... };
}
static constexpr auto _BuildCanal_dispatch = MakeDispatchTableBuildCanal(std::make_index_sequence<_callback_tuple_size>{});
bool BuildCanal::do_post(CommandCallback *callback) {
    return _BuildCanal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->wc, this->diagonal);
}
bool BuildCanal::do_test() {
    return (::Command<CMD_BUILD_CANAL>::Do(DC_NONE, this->tile, start_tile, wc, diagonal)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildLock(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile), sizeof...(i)>{MakeCallback<CMD_BUILD_LOCK, i>()... };
}
static constexpr auto _BuildLock_dispatch = MakeDispatchTableBuildLock(std::make_index_sequence<_callback_tuple_size>{});
bool BuildLock::do_post(CommandCallback *callback) {
    return _BuildLock_dispatch[FindCallbackIndex(callback)](this->error, this->tile);
}
bool BuildLock::do_test() {
    return (::Command<CMD_BUILD_LOCK>::Do(DC_NONE, this->tile)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildLongRoad(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , RoadType , Axis , DisallowedRoadDirections , bool , bool , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_LONG_ROAD, i, TileIndex , RoadType , Axis , DisallowedRoadDirections , bool , bool , bool >()... };
}
static constexpr auto _BuildLongRoad_dispatch = MakeDispatchTableBuildLongRoad(std::make_index_sequence<_callback_tuple_size>{});
bool BuildLongRoad::do_post(CommandCallback *callback) {
    return _BuildLongRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->rt, this->axis, this->drd, this->start_half, this->end_half, this->is_ai);
}
bool BuildLongRoad::do_test() {
    return (::Command<CMD_BUILD_LONG_ROAD>::Do(DC_NONE, this->tile, start_tile, rt, axis, drd, start_half, end_half, is_ai)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveLongRoad(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , RoadType , Axis , bool , bool ), sizeof...(i)>{MakeCallback<CMD_REMOVE_LONG_ROAD, i, TileIndex , RoadType , Axis , bool , bool >()... };
}
static constexpr auto _RemoveLongRoad_dispatch = MakeDispatchTableRemoveLongRoad(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveLongRoad::do_post(CommandCallback *callback) {
    return _RemoveLongRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->rt, this->axis, this->start_half, this->end_half);
}
bool RemoveLongRoad::do_test() {
    return std::get<0>(::Command<CMD_REMOVE_LONG_ROAD>::Do(DC_NONE, this->tile, start_tile, rt, axis, start_half, end_half)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildRoad(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, RoadBits , RoadType , DisallowedRoadDirections , TownID ), sizeof...(i)>{MakeCallback<CMD_BUILD_ROAD, i, RoadBits , RoadType , DisallowedRoadDirections , TownID >()... };
}
static constexpr auto _BuildRoad_dispatch = MakeDispatchTableBuildRoad(std::make_index_sequence<_callback_tuple_size>{});
bool BuildRoad::do_post(CommandCallback *callback) {
    return _BuildRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->pieces, this->rt, this->toggle_drd, this->town_id);
}
bool BuildRoad::do_test() {
    return (::Command<CMD_BUILD_ROAD>::Do(DC_NONE, this->tile, pieces, rt, toggle_drd, town_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildRoadDepot(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, RoadType , DiagDirection ), sizeof...(i)>{MakeCallback<CMD_BUILD_ROAD_DEPOT, i, RoadType , DiagDirection >()... };
}
static constexpr auto _BuildRoadDepot_dispatch = MakeDispatchTableBuildRoadDepot(std::make_index_sequence<_callback_tuple_size>{});
bool BuildRoadDepot::do_post(CommandCallback *callback) {
    return _BuildRoadDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->rt, this->dir);
}
bool BuildRoadDepot::do_test() {
    return (::Command<CMD_BUILD_ROAD_DEPOT>::Do(DC_NONE, this->tile, rt, dir)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableConvertRoad(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , RoadType ), sizeof...(i)>{MakeCallback<CMD_CONVERT_ROAD, i, TileIndex , RoadType >()... };
}
static constexpr auto _ConvertRoad_dispatch = MakeDispatchTableConvertRoad(std::make_index_sequence<_callback_tuple_size>{});
bool ConvertRoad::do_post(CommandCallback *callback) {
    return _ConvertRoad_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->area_start, this->to_type);
}
bool ConvertRoad::do_test() {
    return (::Command<CMD_CONVERT_ROAD>::Do(DC_NONE, this->tile, area_start, to_type)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildRailroadTrack(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , RailType , Track , bool , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_RAILROAD_TRACK, i, TileIndex , RailType , Track , bool , bool >()... };
}
static constexpr auto _BuildRailroadTrack_dispatch = MakeDispatchTableBuildRailroadTrack(std::make_index_sequence<_callback_tuple_size>{});
bool BuildRailroadTrack::do_post(CommandCallback *callback) {
    return _BuildRailroadTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->railtype, this->track, this->auto_remove_signals, this->fail_on_obstacle);
}
bool BuildRailroadTrack::do_test() {
    return (::Command<CMD_BUILD_RAILROAD_TRACK>::Do(DC_NONE, this->tile, start_tile, railtype, track, auto_remove_signals, fail_on_obstacle)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveRailroadTrack(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , Track ), sizeof...(i)>{MakeCallback<CMD_REMOVE_RAILROAD_TRACK, i, TileIndex , Track >()... };
}
static constexpr auto _RemoveRailroadTrack_dispatch = MakeDispatchTableRemoveRailroadTrack(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveRailroadTrack::do_post(CommandCallback *callback) {
    return _RemoveRailroadTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->track);
}
bool RemoveRailroadTrack::do_test() {
    return (::Command<CMD_REMOVE_RAILROAD_TRACK>::Do(DC_NONE, this->tile, start_tile, track)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildSingleRail(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, RailType , Track , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_SINGLE_RAIL, i, RailType , Track , bool >()... };
}
static constexpr auto _BuildSingleRail_dispatch = MakeDispatchTableBuildSingleRail(std::make_index_sequence<_callback_tuple_size>{});
bool BuildSingleRail::do_post(CommandCallback *callback) {
    return _BuildSingleRail_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->railtype, this->track, this->auto_remove_signals);
}
bool BuildSingleRail::do_test() {
    return (::Command<CMD_BUILD_SINGLE_RAIL>::Do(DC_NONE, this->tile, railtype, track, auto_remove_signals)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveSingleRail(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Track ), sizeof...(i)>{MakeCallback<CMD_REMOVE_SINGLE_RAIL, i, Track >()... };
}
static constexpr auto _RemoveSingleRail_dispatch = MakeDispatchTableRemoveSingleRail(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveSingleRail::do_post(CommandCallback *callback) {
    return _RemoveSingleRail_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->track);
}
bool RemoveSingleRail::do_test() {
    return (::Command<CMD_REMOVE_SINGLE_RAIL>::Do(DC_NONE, this->tile, track)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildTrainDepot(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, RailType , DiagDirection ), sizeof...(i)>{MakeCallback<CMD_BUILD_TRAIN_DEPOT, i, RailType , DiagDirection >()... };
}
static constexpr auto _BuildTrainDepot_dispatch = MakeDispatchTableBuildTrainDepot(std::make_index_sequence<_callback_tuple_size>{});
bool BuildTrainDepot::do_post(CommandCallback *callback) {
    return _BuildTrainDepot_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->railtype, this->dir);
}
bool BuildTrainDepot::do_test() {
    return (::Command<CMD_BUILD_TRAIN_DEPOT>::Do(DC_NONE, this->tile, railtype, dir)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildSingleSignal(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Track , SignalType , SignalVariant , bool , bool , bool , SignalType , SignalType , uint8 , byte ), sizeof...(i)>{MakeCallback<CMD_BUILD_SIGNALS, i, Track , SignalType , SignalVariant , bool , bool , bool , SignalType , SignalType , uint8 , byte >()... };
}
static constexpr auto _BuildSingleSignal_dispatch = MakeDispatchTableBuildSingleSignal(std::make_index_sequence<_callback_tuple_size>{});
bool BuildSingleSignal::do_post(CommandCallback *callback) {
    return _BuildSingleSignal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->track, this->sigtype, this->sigvar, this->convert_signal, this->skip_existing_signals, this->ctrl_pressed, this->cycle_start, this->cycle_stop, this->num_dir_cycle, this->signals_copy);
}
bool BuildSingleSignal::do_test() {
    return (::Command<CMD_BUILD_SIGNALS>::Do(DC_NONE, this->tile, track, sigtype, sigvar, convert_signal, skip_existing_signals, ctrl_pressed, cycle_start, cycle_stop, num_dir_cycle, signals_copy)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveSingleSignal(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Track ), sizeof...(i)>{MakeCallback<CMD_REMOVE_SIGNALS, i, Track >()... };
}
static constexpr auto _RemoveSingleSignal_dispatch = MakeDispatchTableRemoveSingleSignal(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveSingleSignal::do_post(CommandCallback *callback) {
    return _RemoveSingleSignal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->track);
}
bool RemoveSingleSignal::do_test() {
    return (::Command<CMD_REMOVE_SIGNALS>::Do(DC_NONE, this->tile, track)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableConvertRail(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , RailType , bool ), sizeof...(i)>{MakeCallback<CMD_CONVERT_RAIL, i, TileIndex , RailType , bool >()... };
}
static constexpr auto _ConvertRail_dispatch = MakeDispatchTableConvertRail(std::make_index_sequence<_callback_tuple_size>{});
bool ConvertRail::do_post(CommandCallback *callback) {
    return _ConvertRail_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->area_start, this->totype, this->diagonal);
}
bool ConvertRail::do_test() {
    return (::Command<CMD_CONVERT_RAIL>::Do(DC_NONE, this->tile, area_start, totype, diagonal)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildSignalTrack(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , Track , SignalType , SignalVariant , bool , bool , bool , byte ), sizeof...(i)>{MakeCallback<CMD_BUILD_SIGNAL_TRACK, i, TileIndex , Track , SignalType , SignalVariant , bool , bool , bool , byte >()... };
}
static constexpr auto _BuildSignalTrack_dispatch = MakeDispatchTableBuildSignalTrack(std::make_index_sequence<_callback_tuple_size>{});
bool BuildSignalTrack::do_post(CommandCallback *callback) {
    return _BuildSignalTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end_tile, this->track, this->sigtype, this->sigvar, this->mode, this->autofill, this->minimise_gaps, this->signal_density);
}
bool BuildSignalTrack::do_test() {
    return (::Command<CMD_BUILD_SIGNAL_TRACK>::Do(DC_NONE, this->tile, end_tile, track, sigtype, sigvar, mode, autofill, minimise_gaps, signal_density)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveSignalTrack(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , Track , bool ), sizeof...(i)>{MakeCallback<CMD_REMOVE_SIGNAL_TRACK, i, TileIndex , Track , bool >()... };
}
static constexpr auto _RemoveSignalTrack_dispatch = MakeDispatchTableRemoveSignalTrack(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveSignalTrack::do_post(CommandCallback *callback) {
    return _RemoveSignalTrack_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end_tile, this->track, this->autofill);
}
bool RemoveSignalTrack::do_test() {
    return (::Command<CMD_REMOVE_SIGNAL_TRACK>::Do(DC_NONE, this->tile, end_tile, track, autofill)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildIndustry(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, IndustryType , uint32 , bool , uint32 ), sizeof...(i)>{MakeCallback<CMD_BUILD_INDUSTRY, i, IndustryType , uint32 , bool , uint32 >()... };
}
static constexpr auto _BuildIndustry_dispatch = MakeDispatchTableBuildIndustry(std::make_index_sequence<_callback_tuple_size>{});
bool BuildIndustry::do_post(CommandCallback *callback) {
    return _BuildIndustry_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->it, this->first_layout, this->fund, this->seed);
}
bool BuildIndustry::do_test() {
    return (::Command<CMD_BUILD_INDUSTRY>::Do(DC_NONE, this->tile, it, first_layout, fund, seed)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableIndustryCtrl(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, IndustryID , IndustryAction , IndustryControlFlags , Owner , const std::string &), sizeof...(i)>{MakeCallback<CMD_INDUSTRY_CTRL, i, IndustryID , IndustryAction , IndustryControlFlags , Owner , const std::string &>()... };
}
static constexpr auto _IndustryCtrl_dispatch = MakeDispatchTableIndustryCtrl(std::make_index_sequence<_callback_tuple_size>{});
bool IndustryCtrl::do_post(CommandCallback *callback) {
    return _IndustryCtrl_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->ind_id, this->action, this->ctlflags, this->company_id, this->text);
}
bool IndustryCtrl::do_test() {
    return (::Command<CMD_INDUSTRY_CTRL>::Do(DC_NONE, ind_id, action, ctlflags, company_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildRailWaypoint(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Axis , byte , byte , StationClassID , byte , StationID , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_RAIL_WAYPOINT, i, Axis , byte , byte , StationClassID , byte , StationID , bool >()... };
}
static constexpr auto _BuildRailWaypoint_dispatch = MakeDispatchTableBuildRailWaypoint(std::make_index_sequence<_callback_tuple_size>{});
bool BuildRailWaypoint::do_post(CommandCallback *callback) {
    return _BuildRailWaypoint_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->axis, this->width, this->height, this->spec_class, this->spec_index, this->station_to_join, this->adjacent);
}
bool BuildRailWaypoint::do_test() {
    return (::Command<CMD_BUILD_RAIL_WAYPOINT>::Do(DC_NONE, this->tile, axis, width, height, spec_class, spec_index, station_to_join, adjacent)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRemoveFromRailWaypoint(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , bool ), sizeof...(i)>{MakeCallback<CMD_REMOVE_FROM_RAIL_WAYPOINT, i, TileIndex , bool >()... };
}
static constexpr auto _RemoveFromRailWaypoint_dispatch = MakeDispatchTableRemoveFromRailWaypoint(std::make_index_sequence<_callback_tuple_size>{});
bool RemoveFromRailWaypoint::do_post(CommandCallback *callback) {
    return _RemoveFromRailWaypoint_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->end, this->keep_rail);
}
bool RemoveFromRailWaypoint::do_test() {
    return (::Command<CMD_REMOVE_FROM_RAIL_WAYPOINT>::Do(DC_NONE, this->tile, end, keep_rail)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildBuoy(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile), sizeof...(i)>{MakeCallback<CMD_BUILD_BUOY, i>()... };
}
static constexpr auto _BuildBuoy_dispatch = MakeDispatchTableBuildBuoy(std::make_index_sequence<_callback_tuple_size>{});
bool BuildBuoy::do_post(CommandCallback *callback) {
    return _BuildBuoy_dispatch[FindCallbackIndex(callback)](this->error, this->tile);
}
bool BuildBuoy::do_test() {
    return (::Command<CMD_BUILD_BUOY>::Do(DC_NONE, this->tile)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameWaypoint(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, StationID , const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_WAYPOINT, i, StationID , const std::string &>()... };
}
static constexpr auto _RenameWaypoint_dispatch = MakeDispatchTableRenameWaypoint(std::make_index_sequence<_callback_tuple_size>{});
bool RenameWaypoint::do_post(CommandCallback *callback) {
    return _RenameWaypoint_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->waypoint_id, this->text);
}
bool RenameWaypoint::do_test() {
    return (::Command<CMD_RENAME_WAYPOINT>::Do(DC_NONE, waypoint_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableFoundTown(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownSize , bool , TownLayout , bool , uint32 , const std::string &), sizeof...(i)>{MakeCallback<CMD_FOUND_TOWN, i, TownSize , bool , TownLayout , bool , uint32 , const std::string &>()... };
}
static constexpr auto _FoundTown_dispatch = MakeDispatchTableFoundTown(std::make_index_sequence<_callback_tuple_size>{});
bool FoundTown::do_post(CommandCallback *callback) {
    return _FoundTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->size, this->city, this->layout, this->random_location, this->townnameparts, this->text);
}
bool FoundTown::do_test() {
    return std::get<0>(::Command<CMD_FOUND_TOWN>::Do(DC_NONE, this->tile, size, city, layout, random_location, townnameparts, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameTown(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID , const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_TOWN, i, TownID , const std::string &>()... };
}
static constexpr auto _RenameTown_dispatch = MakeDispatchTableRenameTown(std::make_index_sequence<_callback_tuple_size>{});
bool RenameTown::do_post(CommandCallback *callback) {
    return _RenameTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->text);
}
bool RenameTown::do_test() {
    return (::Command<CMD_RENAME_TOWN>::Do(DC_NONE, town_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableDoTownAction(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID , uint8 ), sizeof...(i)>{MakeCallback<CMD_DO_TOWN_ACTION, i, TownID , uint8 >()... };
}
static constexpr auto _DoTownAction_dispatch = MakeDispatchTableDoTownAction(std::make_index_sequence<_callback_tuple_size>{});
bool DoTownAction::do_post(CommandCallback *callback) {
    return _DoTownAction_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->action);
}
bool DoTownAction::do_test() {
    return (::Command<CMD_DO_TOWN_ACTION>::Do(DC_NONE, town_id, action)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableTownGrowthRate(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID , uint16 ), sizeof...(i)>{MakeCallback<CMD_TOWN_GROWTH_RATE, i, TownID , uint16 >()... };
}
static constexpr auto _TownGrowthRate_dispatch = MakeDispatchTableTownGrowthRate(std::make_index_sequence<_callback_tuple_size>{});
bool TownGrowthRate::do_post(CommandCallback *callback) {
    return _TownGrowthRate_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->growth_rate);
}
bool TownGrowthRate::do_test() {
    return (::Command<CMD_TOWN_GROWTH_RATE>::Do(DC_NONE, town_id, growth_rate)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableTownRating(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID , CompanyID , int16 ), sizeof...(i)>{MakeCallback<CMD_TOWN_RATING, i, TownID , CompanyID , int16 >()... };
}
static constexpr auto _TownRating_dispatch = MakeDispatchTableTownRating(std::make_index_sequence<_callback_tuple_size>{});
bool TownRating::do_post(CommandCallback *callback) {
    return _TownRating_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->company_id, this->rating);
}
bool TownRating::do_test() {
    return (::Command<CMD_TOWN_RATING>::Do(DC_NONE, town_id, company_id, rating)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableTownCargoGoal(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID , TownEffect , uint32 ), sizeof...(i)>{MakeCallback<CMD_TOWN_CARGO_GOAL, i, TownID , TownEffect , uint32 >()... };
}
static constexpr auto _TownCargoGoal_dispatch = MakeDispatchTableTownCargoGoal(std::make_index_sequence<_callback_tuple_size>{});
bool TownCargoGoal::do_post(CommandCallback *callback) {
    return _TownCargoGoal_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->te, this->goal);
}
bool TownCargoGoal::do_test() {
    return (::Command<CMD_TOWN_CARGO_GOAL>::Do(DC_NONE, town_id, te, goal)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableTownSetText(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID , const std::string &), sizeof...(i)>{MakeCallback<CMD_TOWN_SET_TEXT, i, TownID , const std::string &>()... };
}
static constexpr auto _TownSetText_dispatch = MakeDispatchTableTownSetText(std::make_index_sequence<_callback_tuple_size>{});
bool TownSetText::do_post(CommandCallback *callback) {
    return _TownSetText_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->text);
}
bool TownSetText::do_test() {
    return (::Command<CMD_TOWN_SET_TEXT>::Do(DC_NONE, town_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableExpandTown(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID , uint32 ), sizeof...(i)>{MakeCallback<CMD_EXPAND_TOWN, i, TownID , uint32 >()... };
}
static constexpr auto _ExpandTown_dispatch = MakeDispatchTableExpandTown(std::make_index_sequence<_callback_tuple_size>{});
bool ExpandTown::do_post(CommandCallback *callback) {
    return _ExpandTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id, this->grow_amount);
}
bool ExpandTown::do_test() {
    return (::Command<CMD_EXPAND_TOWN>::Do(DC_NONE, town_id, grow_amount)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableDeleteTown(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TownID ), sizeof...(i)>{MakeCallback<CMD_DELETE_TOWN, i, TownID >()... };
}
static constexpr auto _DeleteTown_dispatch = MakeDispatchTableDeleteTown(std::make_index_sequence<_callback_tuple_size>{});
bool DeleteTown::do_post(CommandCallback *callback) {
    return _DeleteTown_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->town_id);
}
bool DeleteTown::do_test() {
    return (::Command<CMD_DELETE_TOWN>::Do(DC_NONE, town_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildObject(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, ObjectType , uint8 ), sizeof...(i)>{MakeCallback<CMD_BUILD_OBJECT, i, ObjectType , uint8 >()... };
}
static constexpr auto _BuildObject_dispatch = MakeDispatchTableBuildObject(std::make_index_sequence<_callback_tuple_size>{});
bool BuildObject::do_post(CommandCallback *callback) {
    return _BuildObject_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->type, this->view);
}
bool BuildObject::do_test() {
    return (::Command<CMD_BUILD_OBJECT>::Do(DC_NONE, this->tile, type, view)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildObjectArea(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , ObjectType , uint8 , bool ), sizeof...(i)>{MakeCallback<CMD_BUILD_OBJECT_AREA, i, TileIndex , ObjectType , uint8 , bool >()... };
}
static constexpr auto _BuildObjectArea_dispatch = MakeDispatchTableBuildObjectArea(std::make_index_sequence<_callback_tuple_size>{});
bool BuildObjectArea::do_post(CommandCallback *callback) {
    return _BuildObjectArea_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->type, this->view, this->diagonal);
}
bool BuildObjectArea::do_test() {
    return (::Command<CMD_BUILD_OBJECT_AREA>::Do(DC_NONE, this->tile, start_tile, type, view, diagonal)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableMoveRailVehicle(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleID , bool ), sizeof...(i)>{MakeCallback<CMD_MOVE_RAIL_VEHICLE, i, VehicleID , VehicleID , bool >()... };
}
static constexpr auto _MoveRailVehicle_dispatch = MakeDispatchTableMoveRailVehicle(std::make_index_sequence<_callback_tuple_size>{});
bool MoveRailVehicle::do_post(CommandCallback *callback) {
    return _MoveRailVehicle_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->src_veh, this->dest_veh, this->move_chain);
}
bool MoveRailVehicle::do_test() {
    return (::Command<CMD_MOVE_RAIL_VEHICLE>::Do(DC_NONE, src_veh, dest_veh, move_chain)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableForceTrainProceed(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID ), sizeof...(i)>{MakeCallback<CMD_FORCE_TRAIN_PROCEED, i, VehicleID >()... };
}
static constexpr auto _ForceTrainProceed_dispatch = MakeDispatchTableForceTrainProceed(std::make_index_sequence<_callback_tuple_size>{});
bool ForceTrainProceed::do_post(CommandCallback *callback) {
    return _ForceTrainProceed_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id);
}
bool ForceTrainProceed::do_test() {
    return (::Command<CMD_FORCE_TRAIN_PROCEED>::Do(DC_NONE, veh_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableReverseTrainDirection(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , bool ), sizeof...(i)>{MakeCallback<CMD_REVERSE_TRAIN_DIRECTION, i, VehicleID , bool >()... };
}
static constexpr auto _ReverseTrainDirection_dispatch = MakeDispatchTableReverseTrainDirection(std::make_index_sequence<_callback_tuple_size>{});
bool ReverseTrainDirection::do_post(CommandCallback *callback) {
    return _ReverseTrainDirection_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->reverse_single_veh);
}
bool ReverseTrainDirection::do_test() {
    return (::Command<CMD_REVERSE_TRAIN_DIRECTION>::Do(DC_NONE, veh_id, reverse_single_veh)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTablePlaceSign(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, const std::string &), sizeof...(i)>{MakeCallback<CMD_PLACE_SIGN, i, const std::string &>()... };
}
static constexpr auto _PlaceSign_dispatch = MakeDispatchTablePlaceSign(std::make_index_sequence<_callback_tuple_size>{});
bool PlaceSign::do_post(CommandCallback *callback) {
    return _PlaceSign_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->text);
}
bool PlaceSign::do_test() {
    return std::get<0>(::Command<CMD_PLACE_SIGN>::Do(DC_NONE, this->tile, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableRenameSign(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, SignID , const std::string &), sizeof...(i)>{MakeCallback<CMD_RENAME_SIGN, i, SignID , const std::string &>()... };
}
static constexpr auto _RenameSign_dispatch = MakeDispatchTableRenameSign(std::make_index_sequence<_callback_tuple_size>{});
bool RenameSign::do_post(CommandCallback *callback) {
    return _RenameSign_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->sign_id, this->text);
}
bool RenameSign::do_test() {
    return (::Command<CMD_RENAME_SIGN>::Do(DC_NONE, sign_id, text)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildBridge(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , TransportType , BridgeType , byte ), sizeof...(i)>{MakeCallback<CMD_BUILD_BRIDGE, i, TileIndex , TransportType , BridgeType , byte >()... };
}
static constexpr auto _BuildBridge_dispatch = MakeDispatchTableBuildBridge(std::make_index_sequence<_callback_tuple_size>{});
bool BuildBridge::do_post(CommandCallback *callback) {
    return _BuildBridge_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->tile_start, this->transport_type, this->bridge_type, this->road_rail_type);
}
bool BuildBridge::do_test() {
    return (::Command<CMD_BUILD_BRIDGE>::Do(DC_NONE, this->tile, tile_start, transport_type, bridge_type, road_rail_type)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuildTunnel(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TransportType , byte ), sizeof...(i)>{MakeCallback<CMD_BUILD_TUNNEL, i, TransportType , byte >()... };
}
static constexpr auto _BuildTunnel_dispatch = MakeDispatchTableBuildTunnel(std::make_index_sequence<_callback_tuple_size>{});
bool BuildTunnel::do_post(CommandCallback *callback) {
    return _BuildTunnel_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->transport_type, this->road_rail_type);
}
bool BuildTunnel::do_test() {
    return (::Command<CMD_BUILD_TUNNEL>::Do(DC_NONE, this->tile, transport_type, road_rail_type)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableTerraformLand(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Slope , bool ), sizeof...(i)>{MakeCallback<CMD_TERRAFORM_LAND, i, Slope , bool >()... };
}
static constexpr auto _TerraformLand_dispatch = MakeDispatchTableTerraformLand(std::make_index_sequence<_callback_tuple_size>{});
bool TerraformLand::do_post(CommandCallback *callback) {
    return _TerraformLand_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->slope, this->dir_up);
}
bool TerraformLand::do_test() {
    return std::get<0>(::Command<CMD_TERRAFORM_LAND>::Do(DC_NONE, this->tile, slope, dir_up)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableLevelLand(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, TileIndex , bool , LevelMode ), sizeof...(i)>{MakeCallback<CMD_LEVEL_LAND, i, TileIndex , bool , LevelMode >()... };
}
static constexpr auto _LevelLand_dispatch = MakeDispatchTableLevelLand(std::make_index_sequence<_callback_tuple_size>{});
bool LevelLand::do_post(CommandCallback *callback) {
    return _LevelLand_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->start_tile, this->diagonal, this->lm);
}
bool LevelLand::do_test() {
    return std::get<0>(::Command<CMD_LEVEL_LAND>::Do(DC_NONE, this->tile, start_tile, diagonal, lm)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableMoneyCheat(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Money ), sizeof...(i)>{MakeCallback<CMD_MONEY_CHEAT, i, Money >()... };
}
static constexpr auto _MoneyCheat_dispatch = MakeDispatchTableMoneyCheat(std::make_index_sequence<_callback_tuple_size>{});
bool MoneyCheat::do_post(CommandCallback *callback) {
    return _MoneyCheat_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->amount);
}
bool MoneyCheat::do_test() {
    return (::Command<CMD_MONEY_CHEAT>::Do(DC_NONE, amount)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableChangeBankBalance(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, Money , CompanyID , ExpensesType ), sizeof...(i)>{MakeCallback<CMD_CHANGE_BANK_BALANCE, i, Money , CompanyID , ExpensesType >()... };
}
static constexpr auto _ChangeBankBalance_dispatch = MakeDispatchTableChangeBankBalance(std::make_index_sequence<_callback_tuple_size>{});
bool ChangeBankBalance::do_post(CommandCallback *callback) {
    return _ChangeBankBalance_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->delta, this->company, this->expenses_type);
}
bool ChangeBankBalance::do_test() {
    return (::Command<CMD_CHANGE_BANK_BALANCE>::Do(DC_NONE, this->tile, delta, company, expenses_type)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableIncreaseLoan(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, LoanCommand , Money ), sizeof...(i)>{MakeCallback<CMD_INCREASE_LOAN, i, LoanCommand , Money >()... };
}
static constexpr auto _IncreaseLoan_dispatch = MakeDispatchTableIncreaseLoan(std::make_index_sequence<_callback_tuple_size>{});
bool IncreaseLoan::do_post(CommandCallback *callback) {
    return _IncreaseLoan_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cmd, this->amount);
}
bool IncreaseLoan::do_test() {
    return (::Command<CMD_INCREASE_LOAN>::Do(DC_NONE, cmd, amount)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableDecreaseLoan(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, LoanCommand , Money ), sizeof...(i)>{MakeCallback<CMD_DECREASE_LOAN, i, LoanCommand , Money >()... };
}
static constexpr auto _DecreaseLoan_dispatch = MakeDispatchTableDecreaseLoan(std::make_index_sequence<_callback_tuple_size>{});
bool DecreaseLoan::do_post(CommandCallback *callback) {
    return _DecreaseLoan_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cmd, this->amount);
}
bool DecreaseLoan::do_test() {
    return (::Command<CMD_DECREASE_LOAN>::Do(DC_NONE, cmd, amount)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTablePause(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, PauseMode , bool ), sizeof...(i)>{MakeCallback<CMD_PAUSE, i, PauseMode , bool >()... };
}
static constexpr auto _Pause_dispatch = MakeDispatchTablePause(std::make_index_sequence<_callback_tuple_size>{});
bool Pause::do_post(CommandCallback *callback) {
    return _Pause_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->mode, this->pause);
}
bool Pause::do_test() {
    return (::Command<CMD_PAUSE>::Do(DC_NONE, mode, pause)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableModifyOrder(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleOrderID , ModifyOrderFlags , uint16 ), sizeof...(i)>{MakeCallback<CMD_MODIFY_ORDER, i, VehicleID , VehicleOrderID , ModifyOrderFlags , uint16 >()... };
}
static constexpr auto _ModifyOrder_dispatch = MakeDispatchTableModifyOrder(std::make_index_sequence<_callback_tuple_size>{});
bool ModifyOrder::do_post(CommandCallback *callback) {
    return _ModifyOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->sel_ord, this->mof, this->data);
}
bool ModifyOrder::do_test() {
    return (::Command<CMD_MODIFY_ORDER>::Do(DC_NONE, veh, sel_ord, mof, data)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSkipToOrder(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleOrderID ), sizeof...(i)>{MakeCallback<CMD_SKIP_TO_ORDER, i, VehicleID , VehicleOrderID >()... };
}
static constexpr auto _SkipToOrder_dispatch = MakeDispatchTableSkipToOrder(std::make_index_sequence<_callback_tuple_size>{});
bool SkipToOrder::do_post(CommandCallback *callback) {
    return _SkipToOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->sel_ord);
}
bool SkipToOrder::do_test() {
    return (::Command<CMD_SKIP_TO_ORDER>::Do(DC_NONE, veh_id, sel_ord)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableDeleteOrder(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleOrderID ), sizeof...(i)>{MakeCallback<CMD_DELETE_ORDER, i, VehicleID , VehicleOrderID >()... };
}
static constexpr auto _DeleteOrder_dispatch = MakeDispatchTableDeleteOrder(std::make_index_sequence<_callback_tuple_size>{});
bool DeleteOrder::do_post(CommandCallback *callback) {
    return _DeleteOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh_id, this->sel_ord);
}
bool DeleteOrder::do_test() {
    return (::Command<CMD_DELETE_ORDER>::Do(DC_NONE, veh_id, sel_ord)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableInsertOrder(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleOrderID , const Order &), sizeof...(i)>{MakeCallback<CMD_INSERT_ORDER, i, VehicleID , VehicleOrderID , const Order &>()... };
}
static constexpr auto _InsertOrder_dispatch = MakeDispatchTableInsertOrder(std::make_index_sequence<_callback_tuple_size>{});
bool InsertOrder::do_post(CommandCallback *callback) {
    return _InsertOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->sel_ord, this->new_order);
}
bool InsertOrder::do_test() {
    return (::Command<CMD_INSERT_ORDER>::Do(DC_NONE, veh, sel_ord, new_order)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableOrderRefit(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleOrderID , CargoID ), sizeof...(i)>{MakeCallback<CMD_ORDER_REFIT, i, VehicleID , VehicleOrderID , CargoID >()... };
}
static constexpr auto _OrderRefit_dispatch = MakeDispatchTableOrderRefit(std::make_index_sequence<_callback_tuple_size>{});
bool OrderRefit::do_post(CommandCallback *callback) {
    return _OrderRefit_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->order_number, this->cargo);
}
bool OrderRefit::do_test() {
    return (::Command<CMD_ORDER_REFIT>::Do(DC_NONE, veh, order_number, cargo)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCloneOrder(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CloneOptions , VehicleID , VehicleID ), sizeof...(i)>{MakeCallback<CMD_CLONE_ORDER, i, CloneOptions , VehicleID , VehicleID >()... };
}
static constexpr auto _CloneOrder_dispatch = MakeDispatchTableCloneOrder(std::make_index_sequence<_callback_tuple_size>{});
bool CloneOrder::do_post(CommandCallback *callback) {
    return _CloneOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->action, this->veh_dst, this->veh_src);
}
bool CloneOrder::do_test() {
    return (::Command<CMD_CLONE_ORDER>::Do(DC_NONE, action, veh_dst, veh_src)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableMoveOrder(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, VehicleID , VehicleOrderID , VehicleOrderID ), sizeof...(i)>{MakeCallback<CMD_MOVE_ORDER, i, VehicleID , VehicleOrderID , VehicleOrderID >()... };
}
static constexpr auto _MoveOrder_dispatch = MakeDispatchTableMoveOrder(std::make_index_sequence<_callback_tuple_size>{});
bool MoveOrder::do_post(CommandCallback *callback) {
    return _MoveOrder_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->veh, this->moving_order, this->target_order);
}
bool MoveOrder::do_test() {
    return (::Command<CMD_MOVE_ORDER>::Do(DC_NONE, veh, moving_order, target_order)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableClearOrderBackup(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, ClientID ), sizeof...(i)>{MakeCallback<CMD_CLEAR_ORDER_BACKUP, i, ClientID >()... };
}
static constexpr auto _ClearOrderBackup_dispatch = MakeDispatchTableClearOrderBackup(std::make_index_sequence<_callback_tuple_size>{});
bool ClearOrderBackup::do_post(CommandCallback *callback) {
    return _ClearOrderBackup_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->user_id);
}
bool ClearOrderBackup::do_test() {
    return (::Command<CMD_CLEAR_ORDER_BACKUP>::Do(DC_NONE, this->tile, user_id)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableCreateSubsidy(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CargoID , SourceType , SourceID , SourceType , SourceID ), sizeof...(i)>{MakeCallback<CMD_CREATE_SUBSIDY, i, CargoID , SourceType , SourceID , SourceType , SourceID >()... };
}
static constexpr auto _CreateSubsidy_dispatch = MakeDispatchTableCreateSubsidy(std::make_index_sequence<_callback_tuple_size>{});
bool CreateSubsidy::do_post(CommandCallback *callback) {
    return _CreateSubsidy_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->cid, this->src_type, this->src, this->dst_type, this->dst);
}
bool CreateSubsidy::do_test() {
    return (::Command<CMD_CREATE_SUBSIDY>::Do(DC_NONE, cid, src_type, src, dst_type, dst)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableScrollViewport(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, ViewportScrollTarget , uint32 ), sizeof...(i)>{MakeCallback<CMD_SCROLL_VIEWPORT, i, ViewportScrollTarget , uint32 >()... };
}
static constexpr auto _ScrollViewport_dispatch = MakeDispatchTableScrollViewport(std::make_index_sequence<_callback_tuple_size>{});
bool ScrollViewport::do_post(CommandCallback *callback) {
    return _ScrollViewport_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target, this->ref);
}
bool ScrollViewport::do_test() {
    return (::Command<CMD_SCROLL_VIEWPORT>::Do(DC_NONE, this->tile, target, ref)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuyShareInCompany(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CompanyID ), sizeof...(i)>{MakeCallback<CMD_BUY_SHARE_IN_COMPANY, i, CompanyID >()... };
}
static constexpr auto _BuyShareInCompany_dispatch = MakeDispatchTableBuyShareInCompany(std::make_index_sequence<_callback_tuple_size>{});
bool BuyShareInCompany::do_post(CommandCallback *callback) {
    return _BuyShareInCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target_company);
}
bool BuyShareInCompany::do_test() {
    return (::Command<CMD_BUY_SHARE_IN_COMPANY>::Do(DC_NONE, target_company)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableSellShareInCompany(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CompanyID ), sizeof...(i)>{MakeCallback<CMD_SELL_SHARE_IN_COMPANY, i, CompanyID >()... };
}
static constexpr auto _SellShareInCompany_dispatch = MakeDispatchTableSellShareInCompany(std::make_index_sequence<_callback_tuple_size>{});
bool SellShareInCompany::do_post(CommandCallback *callback) {
    return _SellShareInCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target_company);
}
bool SellShareInCompany::do_test() {
    return (::Command<CMD_SELL_SHARE_IN_COMPANY>::Do(DC_NONE, target_company)).Succeeded();
}

template <typename T, T... i, size_t... j>
inline constexpr auto MakeDispatchTableBuyCompany(std::index_sequence<i...>) noexcept
{
    return std::array<bool (*)(StringID err_msg, TileIndex tile, CompanyID ), sizeof...(i)>{MakeCallback<CMD_BUY_COMPANY, i, CompanyID >()... };
}
static constexpr auto _BuyCompany_dispatch = MakeDispatchTableBuyCompany(std::make_index_sequence<_callback_tuple_size>{});
bool BuyCompany::do_post(CommandCallback *callback) {
    return _BuyCompany_dispatch[FindCallbackIndex(callback)](this->error, this->tile, this->target_company);
}
bool BuyCompany::do_test() {
    return (::Command<CMD_BUY_COMPANY>::Do(DC_NONE, target_company)).Succeeded();
}

}  // namespace cmd
}  // namespace citymania
