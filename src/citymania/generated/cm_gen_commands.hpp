// This file is generated by gen_commands.py, do not edit

#ifndef CM_GEN_COMMANDS_HPP
#define CM_GEN_COMMANDS_HPP
#include "../cm_command_type.hpp"
namespace citymania {
namespace cmd {

class MoneyCheat: public Command {
public:
    Money amount;

    MoneyCheat(Money  amount)
        :amount{amount} {}
    ~MoneyCheat() override {}

    bool DoPost() override;
};

class ChangeBankBalance: public Command {
public:
    Money delta;
    CompanyID company;
    ExpensesType expenses_type;

    ChangeBankBalance(Money  delta, CompanyID  company, ExpensesType  expenses_type)
        :delta{delta}, company{company}, expenses_type{expenses_type} {}
    ~ChangeBankBalance() override {}

    bool DoPost() override;
};

class IncreaseLoan: public Command {
public:
    LoanCommand cmd;
    Money amount;

    IncreaseLoan(LoanCommand  cmd, Money  amount)
        :cmd{cmd}, amount{amount} {}
    ~IncreaseLoan() override {}

    bool DoPost() override;
};

class DecreaseLoan: public Command {
public:
    LoanCommand cmd;
    Money amount;

    DecreaseLoan(LoanCommand  cmd, Money  amount)
        :cmd{cmd}, amount{amount} {}
    ~DecreaseLoan() override {}

    bool DoPost() override;
};

class Pause: public Command {
public:
    PauseMode mode;
    bool pause;

    Pause(PauseMode  mode, bool  pause)
        :mode{mode}, pause{pause} {}
    ~Pause() override {}

    bool DoPost() override;
};

class BuildObject: public Command {
public:
    ObjectType type;
    uint8 view;

    BuildObject(ObjectType  type, uint8  view)
        :type{type}, view{view} {}
    ~BuildObject() override {}

    bool DoPost() override;
};

class BuildObjectArea: public Command {
public:
    TileIndex start_tile;
    ObjectType type;
    uint8 view;
    bool diagonal;

    BuildObjectArea(TileIndex  start_tile, ObjectType  type, uint8  view, bool  diagonal)
        :start_tile{start_tile}, type{type}, view{view}, diagonal{diagonal} {}
    ~BuildObjectArea() override {}

    bool DoPost() override;
};

class ModifyOrder: public Command {
public:
    VehicleID veh;
    VehicleOrderID sel_ord;
    ModifyOrderFlags mof;
    uint16 data;

    ModifyOrder(VehicleID  veh, VehicleOrderID  sel_ord, ModifyOrderFlags  mof, uint16  data)
        :veh{veh}, sel_ord{sel_ord}, mof{mof}, data{data} {}
    ~ModifyOrder() override {}

    bool DoPost() override;
};

class SkipToOrder: public Command {
public:
    VehicleID veh_id;
    VehicleOrderID sel_ord;

    SkipToOrder(VehicleID  veh_id, VehicleOrderID  sel_ord)
        :veh_id{veh_id}, sel_ord{sel_ord} {}
    ~SkipToOrder() override {}

    bool DoPost() override;
};

class DeleteOrder: public Command {
public:
    VehicleID veh_id;
    VehicleOrderID sel_ord;

    DeleteOrder(VehicleID  veh_id, VehicleOrderID  sel_ord)
        :veh_id{veh_id}, sel_ord{sel_ord} {}
    ~DeleteOrder() override {}

    bool DoPost() override;
};

class InsertOrder: public Command {
public:
    VehicleID veh;
    VehicleOrderID sel_ord;
    const Order &new_order;

    InsertOrder(VehicleID  veh, VehicleOrderID  sel_ord, const Order & new_order)
        :veh{veh}, sel_ord{sel_ord}, new_order{new_order} {}
    ~InsertOrder() override {}

    bool DoPost() override;
};

class OrderRefit: public Command {
public:
    VehicleID veh;
    VehicleOrderID order_number;
    CargoID cargo;

    OrderRefit(VehicleID  veh, VehicleOrderID  order_number, CargoID  cargo)
        :veh{veh}, order_number{order_number}, cargo{cargo} {}
    ~OrderRefit() override {}

    bool DoPost() override;
};

class CloneOrder: public Command {
public:
    CloneOptions action;
    VehicleID veh_dst;
    VehicleID veh_src;

    CloneOrder(CloneOptions  action, VehicleID  veh_dst, VehicleID  veh_src)
        :action{action}, veh_dst{veh_dst}, veh_src{veh_src} {}
    ~CloneOrder() override {}

    bool DoPost() override;
};

class MoveOrder: public Command {
public:
    VehicleID veh;
    VehicleOrderID moving_order;
    VehicleOrderID target_order;

    MoveOrder(VehicleID  veh, VehicleOrderID  moving_order, VehicleOrderID  target_order)
        :veh{veh}, moving_order{moving_order}, target_order{target_order} {}
    ~MoveOrder() override {}

    bool DoPost() override;
};

class ClearOrderBackup: public Command {
public:
    ClientID user_id;

    ClearOrderBackup(ClientID  user_id)
        :user_id{user_id} {}
    ~ClearOrderBackup() override {}

    bool DoPost() override;
};

class FoundTown: public Command {
public:
    TownSize size;
    bool city;
    TownLayout layout;
    bool random_location;
    uint32 townnameparts;
    const std::string &text;

    FoundTown(TownSize  size, bool  city, TownLayout  layout, bool  random_location, uint32  townnameparts, const std::string & text)
        :size{size}, city{city}, layout{layout}, random_location{random_location}, townnameparts{townnameparts}, text{text} {}
    ~FoundTown() override {}

    bool DoPost() override;
};

class RenameTown: public Command {
public:
    TownID town_id;
    const std::string &text;

    RenameTown(TownID  town_id, const std::string & text)
        :town_id{town_id}, text{text} {}
    ~RenameTown() override {}

    bool DoPost() override;
};

class DoTownAction: public Command {
public:
    TownID town_id;
    uint8 action;

    DoTownAction(TownID  town_id, uint8  action)
        :town_id{town_id}, action{action} {}
    ~DoTownAction() override {}

    bool DoPost() override;
};

class TownGrowthRate: public Command {
public:
    TownID town_id;
    uint16 growth_rate;

    TownGrowthRate(TownID  town_id, uint16  growth_rate)
        :town_id{town_id}, growth_rate{growth_rate} {}
    ~TownGrowthRate() override {}

    bool DoPost() override;
};

class TownRating: public Command {
public:
    TownID town_id;
    CompanyID company_id;
    int16 rating;

    TownRating(TownID  town_id, CompanyID  company_id, int16  rating)
        :town_id{town_id}, company_id{company_id}, rating{rating} {}
    ~TownRating() override {}

    bool DoPost() override;
};

class TownCargoGoal: public Command {
public:
    TownID town_id;
    TownEffect te;
    uint32 goal;

    TownCargoGoal(TownID  town_id, TownEffect  te, uint32  goal)
        :town_id{town_id}, te{te}, goal{goal} {}
    ~TownCargoGoal() override {}

    bool DoPost() override;
};

class TownSetText: public Command {
public:
    TownID town_id;
    const std::string &text;

    TownSetText(TownID  town_id, const std::string & text)
        :town_id{town_id}, text{text} {}
    ~TownSetText() override {}

    bool DoPost() override;
};

class ExpandTown: public Command {
public:
    TownID town_id;
    uint32 grow_amount;

    ExpandTown(TownID  town_id, uint32  grow_amount)
        :town_id{town_id}, grow_amount{grow_amount} {}
    ~ExpandTown() override {}

    bool DoPost() override;
};

class DeleteTown: public Command {
public:
    TownID town_id;

    DeleteTown(TownID  town_id)
        :town_id{town_id} {}
    ~DeleteTown() override {}

    bool DoPost() override;
};

}  // namespace cmd
}  // namespace citymania
#endif
