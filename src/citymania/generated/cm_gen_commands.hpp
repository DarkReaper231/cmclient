// This file is generated by gen_commands.py, do not edit

#include "../cm_command_type.hpp"
namespace citymania {
namespace cmd {

class ModifyOrder: public Command {
public:
    DoCommandFlag  flags;
    VehicleID  veh;
    VehicleOrderID  sel_ord;
    ModifyOrderFlags  mof;
    uint16  data;

    ModifyOrder(DoCommandFlag  flags, VehicleID  veh, VehicleOrderID  sel_ord, ModifyOrderFlags  mof, uint16  data)
        :flags{flags}, veh{veh}, sel_ord{sel_ord}, mof{mof}, data{data} {}

    bool Post(bool automatic=False);
};

class SkipToOrder: public Command {
public:
    DoCommandFlag  flags;
    VehicleID  veh_id;
    VehicleOrderID  sel_ord;

    SkipToOrder(DoCommandFlag  flags, VehicleID  veh_id, VehicleOrderID  sel_ord)
        :flags{flags}, veh_id{veh_id}, sel_ord{sel_ord} {}

    bool Post(bool automatic=False);
};

class DeleteOrder: public Command {
public:
    DoCommandFlag  flags;
    VehicleID  veh_id;
    VehicleOrderID  sel_ord;

    DeleteOrder(DoCommandFlag  flags, VehicleID  veh_id, VehicleOrderID  sel_ord)
        :flags{flags}, veh_id{veh_id}, sel_ord{sel_ord} {}

    bool Post(bool automatic=False);
};

class InsertOrder: public Command {
public:
    DoCommandFlag  flags;
    VehicleID  veh;
    VehicleOrderID  sel_ord;
    const Order & new_order;

    InsertOrder(DoCommandFlag  flags, VehicleID  veh, VehicleOrderID  sel_ord, const Order & new_order)
        :flags{flags}, veh{veh}, sel_ord{sel_ord}, new_order{new_order} {}

    bool Post(bool automatic=False);
};

class OrderRefit: public Command {
public:
    DoCommandFlag  flags;
    VehicleID  veh;
    VehicleOrderID  order_number;
    CargoID  cargo;

    OrderRefit(DoCommandFlag  flags, VehicleID  veh, VehicleOrderID  order_number, CargoID  cargo)
        :flags{flags}, veh{veh}, order_number{order_number}, cargo{cargo} {}

    bool Post(bool automatic=False);
};

class CloneOrder: public Command {
public:
    DoCommandFlag  flags;
    CloneOptions  action;
    VehicleID  veh_dst;
    VehicleID  veh_src;

    CloneOrder(DoCommandFlag  flags, CloneOptions  action, VehicleID  veh_dst, VehicleID  veh_src)
        :flags{flags}, action{action}, veh_dst{veh_dst}, veh_src{veh_src} {}

    bool Post(bool automatic=False);
};

class MoveOrder: public Command {
public:
    DoCommandFlag  flags;
    VehicleID  veh;
    VehicleOrderID  moving_order;
    VehicleOrderID  target_order;

    MoveOrder(DoCommandFlag  flags, VehicleID  veh, VehicleOrderID  moving_order, VehicleOrderID  target_order)
        :flags{flags}, veh{veh}, moving_order{moving_order}, target_order{target_order} {}

    bool Post(bool automatic=False);
};

class ClearOrderBackup: public Command {
public:
    DoCommandFlag  flags;
    TileIndex  tile;
    ClientID  user_id;

    ClearOrderBackup(DoCommandFlag  flags, TileIndex  tile, ClientID  user_id)
        :flags{flags}, tile{tile}, user_id{user_id} {}

    bool Post(bool automatic=False);
};

class CreateStoryPage: public Command {
public:
    DoCommandFlag  flags;
    CompanyID  company;
    const std::string & text;

    CreateStoryPage(DoCommandFlag  flags, CompanyID  company, const std::string & text)
        :flags{flags}, company{company}, text{text} {}

    bool Post(bool automatic=False);
};

class CreateStoryPageElement: public Command {
public:
    DoCommandFlag  flags;
    TileIndex  tile;
    StoryPageID  page_id;
    StoryPageElementType  type;
    uint32  reference;
    const std::string & text;

    CreateStoryPageElement(DoCommandFlag  flags, TileIndex  tile, StoryPageID  page_id, StoryPageElementType  type, uint32  reference, const std::string & text)
        :flags{flags}, tile{tile}, page_id{page_id}, type{type}, reference{reference}, text{text} {}

    bool Post(bool automatic=False);
};

class UpdateStoryPageElement: public Command {
public:
    DoCommandFlag  flags;
    TileIndex  tile;
    StoryPageElementID  page_element_id;
    uint32  reference;
    const std::string & text;

    UpdateStoryPageElement(DoCommandFlag  flags, TileIndex  tile, StoryPageElementID  page_element_id, uint32  reference, const std::string & text)
        :flags{flags}, tile{tile}, page_element_id{page_element_id}, reference{reference}, text{text} {}

    bool Post(bool automatic=False);
};

class SetStoryPageTitle: public Command {
public:
    DoCommandFlag  flags;
    StoryPageID  page_id;
    const std::string & text;

    SetStoryPageTitle(DoCommandFlag  flags, StoryPageID  page_id, const std::string & text)
        :flags{flags}, page_id{page_id}, text{text} {}

    bool Post(bool automatic=False);
};

class SetStoryPageDate: public Command {
public:
    DoCommandFlag  flags;
    StoryPageID  page_id;
    Date  date;

    SetStoryPageDate(DoCommandFlag  flags, StoryPageID  page_id, Date  date)
        :flags{flags}, page_id{page_id}, date{date} {}

    bool Post(bool automatic=False);
};

class ShowStoryPage: public Command {
public:
    DoCommandFlag  flags;
    StoryPageID  page_id;

    ShowStoryPage(DoCommandFlag  flags, StoryPageID  page_id)
        :flags{flags}, page_id{page_id} {}

    bool Post(bool automatic=False);
};

class RemoveStoryPage: public Command {
public:
    DoCommandFlag  flags;
    StoryPageID  page_id;

    RemoveStoryPage(DoCommandFlag  flags, StoryPageID  page_id)
        :flags{flags}, page_id{page_id} {}

    bool Post(bool automatic=False);
};

class RemoveStoryPageElement: public Command {
public:
    DoCommandFlag  flags;
    StoryPageElementID  page_element_id;

    RemoveStoryPageElement(DoCommandFlag  flags, StoryPageElementID  page_element_id)
        :flags{flags}, page_element_id{page_element_id} {}

    bool Post(bool automatic=False);
};

class StoryPageButton: public Command {
public:
    DoCommandFlag  flags;
    TileIndex  tile;
    StoryPageElementID  page_element_id;
    VehicleID  reference;

    StoryPageButton(DoCommandFlag  flags, TileIndex  tile, StoryPageElementID  page_element_id, VehicleID  reference)
        :flags{flags}, tile{tile}, page_element_id{page_element_id}, reference{reference} {}

    bool Post(bool automatic=False);
};

}  // namaespace cmd
}  // namaespace citymania
